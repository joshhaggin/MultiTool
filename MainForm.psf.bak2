<File version="3.0">
  <FileID>58fc88a1-1a7a-4151-82f3-d1f5240124e1</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAP+lSURBVHhe7L0FeBY5+z3MGov74q4t7u6++GKL
u7u7FykOxd0LRUrd3d2VFijuWnTtfPedeVKGZx9sYXn39/8m13WuycxkMkkmk3PuJJPJpDnNaU5z
mtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rT
nOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zm
NKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSn
Oc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznN
aU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlO
c5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa
05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc
5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0
pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5
zWlOc5rTnOY0pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5p7nzv63bffhpYuXSp08uTJofPm
zQ+dM2eeBg0aNGjQoOH/CObOnRe6cOGi0Pbt2oRmzvxDKHE74/3u22+/TWjXti127z+CwOhUJF19
iIS0+xo0aNCgQYOG/yNIvPKAtvfg4h2ECRMmInfu3NDR/LtdqZIlQ3ftO4zIi/fhHXUZ7uEp8NCg
QYMGDRo0/J+Ce3gqgpNuwz8sHh07/vxhATBpwqTQwKgU+MRcgXfkRQ0aNGjQoEHD/1F4RaQi6tJ9
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
l77/Y+L61HgZHxuX2v85cenHaygutZ/xv4xXHf5z49KP11Bcaj/jfxmvOvz74lL7PzZeQ3Gp/YyP
ietLxevk5CSGFu/fu/fvC4CRI0eicOHCqFq1qkDFihVRuXJlVKtWTfiNjY1RvXp1VKpUCUZGRsLP
W95nP5/ncByer6tQoYKIp0qVKsLPWz7H/nfFK+PiePmcfrwyLvZz3Oq42M/XyeMcl7wH7/NxPla+
fHnh57Ds5zg5DvbzlvfZz/flcOznsPIeMi3qeGVc7Ofr9OOVeedrPiXvHFbe7315f1e8HJeMV12O
HFbGJePlOBmG4mI/x8PxvStedXo5HhmvzLt+ev9J3tVplPGy31C8XyrvMo3vy7s63n8r7+znuPXj
+lC8/3be2S/Tayjv74tXxvUl8/6h56OO99/Ou356/0ne1WmU8bLfULxfM+/qeP+tvLOf49aP60Px
/tt5Z79Mr6G8vy9eGdfH5L1YsWKYN2+e6AX41wXA5MmTRWZq1qyJOnXqoHHjxqhVq5ZAo0aNxDE+
x/66deuiRo0aaNiwIerXry/8DRo0EGB/vXr1RDgOz2Glv3bt2sLPWxkvn+dzHBdfp46XC4fj5H39
eDk97Od43hWvjEsdL8fH8XL8Ml51Gj8n7xwv34vPcfivnXf9NLKfr+O4OJ6Pzbs6jV877xyXjFem
UT/v8vn8G3nneD817/pp/Kd5/6fPXR2vjEsd77+Z9y/13P9p3vXTyH6+juPieD427+o0fkze1Wlk
P4f/p3nn+AzFK+NSP59/I+8c7z/Nu4zrn+b9nz53dbwyLnW8XyPv7Ofwn5J3GZf0vy/vLARWrlwp
5hz9awKAxyXZjRs3TtxQKhcuDPazKOAMSKXDx/k8n+NMcqJZ4ciCZL8sCA7DGZRxyXg5HoaMl8+x
n8PKeDmOd8XLfo6Lr+F4OA6O11Aa2c/x8jXyoch4ZVycB5ne9+VdP43qvMv0Gsp7uXLlBPh82bJl
Bfg8HytTpow4zmUv/awGS5cunaFE2S+VJPu5V4Gv53g4DumX1/N5dbx8jVSyfFwqUT7O5w3Fq06j
9PN5DmcoXvZzGnmf78FhORz735d39qvzLuNSp/FL512Wqcw7H5dpZL86jeyX8fI1huJlv0wjX/9P
8/6pz10dL/v/jbyzXx2vTKN+3nmfw3xs3vn45+Rd+uX1H5N3mV6Zd/141WmUfj7P4dRp/Ny8y3hl
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
0E1Ur7z8Ztno8uvVTWQjPFGb8vBEuqW1KYuDZOmW1aY0niwbjSdqUx4ObpQW25tlo8uvVzeRjfBE
bcrDE+mW1qYsDpKlW1ab0ngiG1nkePToURUVFd38AIC7AG677bYwCMChWWZLJkw2a5k0x+Bk0jg4
y3hxeGTPAE72bAGFZc+0RYP2aJou5+IYdaiLLpl3VJdyy/DhluFjo6vLvumaja4utpmN7FPu2pio
76Yb7bvpun03XRtxuOeee65MK/zlL3/Rn//855Czvfvuu0POcerRjqkF4wQWcAsw4BzHVtredddd
V3QBnDKOUcfVNS3sNC0LYuDUvVG6ZiPc1bK+J9Jy+44e/Eb2PZFuor6zH9WN+36s7/fee+819T2R
bnn6XpYuGtgV/d6NJ+p73GdaWt/hHHd1ozaW5zd/M773aN+pB7/RfTddV8v/5uNtjOpeTd+/7795
fMfgwYP16aef3vwAgAcBsQbAnBtOy5wmRsP5IACcMo7BcZJmMO3oCBzAKTNOXVcXB4qmaVFGvagu
TjmRLnVc3TgbXW42omm6bE0rru+JdM1GV9e1lzICA9MkaIBTB242wCnjmAU/1paAwjjgnBynnqvl
crMBbnaaLtx04Raw0N7VNXvLsrEsXXhpfadOVNfVohxuWq696Bq/2r7TxtXieCIbTZdjpgV3+wsH
ZqPxq+27q2vctDhu9rq6cTZyHE75jey76Zq9rq5rY1l9j+rSDl6evpuWy9maLuelTSIbo303bvZe
a99d3dL6Th1XN6pFOZxjcbrGr7bvtHG1OJ7IRtPlmGnB3f7CgdkIp87V9t3VNW66HDd7Xd04Gzlu
/Eb2vTRd10Z4aX2P6tIOHtf3n/3sZ+rdu7c+++yzmx8ANG3aNDypOTCiEEBncHBELZTj/Iha6Ayd
pZwt+xapUY9y2rlacPSpB+e4cXRpwwcA4JShCzdd6pvDTaRLXdq4NpquRXrUo9xspG15+m5abt9d
e6O66KCLFlvTNRujuqZlnym8rL5TVlrf4XE2urpxNl5P32mPrmmhaza69l5N381Gt++UUQ9enr6b
Lja4unDTjes79Vxds5Fys9HVjdpo/b3WvtMuru+mFdd300213zw2Xm/fKStP3+Guja5unI3X03fa
o2ta6JqNrr1X03ez0e07ZdSDl6fvposNri7cdOP6Tj1X12yk3Gx0daM2Wn+vte+0i+u7aZWn79SD
X23fTcvte2m66KBr37vpujZebd9Zk9e/f399lowRgIYNG4YjABjtRiw25I2hcI7DqWPRD4GDRT+U
cQxeWoQV1aUuHxB10DNdQHlUlzama1qmG2cj9gG0XHvNRnhZfaeuabl9L8tGdOFosk8dyoybFhwt
0zV7y9N3V9e0aOd+ptZ30zJd04JH+x7Vvdq+J9KlHpy6ro2mm+j7ierG2Qgvq+9RXXgiG6O6cNfG
aN/h19v3sj5T0zLdOBvRMS3X3vL0nfOYjabl9h2UZiO6cDTd78e4acGvte+urmlRl/bomI1sTct0
TQse13dX92r7nkiXenCzkTpomW6i7yeqG2cjvKy+R3XhcX2Hu7pu383GaN/h19v3sj5T0zLdOBvR
MS3X3qvpO3VNy+07KM1GdF0t6lBm3LTg5en7//pf/0u9evVKzgiALQIkciESsSiGSAQO4MDKjdtx
t55x07JyO+a2T8StntveeFSXrbV3OYjTddu7/S2t72559FicrtUrS9fquNyOufWMR8/hcts3brqJ
2sTZBU9UDnfbwymHX4tdUe62odyOWblrV/R8Vs+4tU1kV5xWIl3TMm7H3XrGy2tXHLd6bnvjcf2w
9i4Hcbpu+7j+uhzE6brH4nStXlQ32tbquNyOufWMx9ll3PaNJ7LLeJxd8ETlpss+gJd1DreNcVer
NF07ZuWuXdHzWT3j1HHb2DHjcVpxulYe1XURp2vldsxtn4hbPbe98UT9MF6Wrts+rr8uB3G67rE4
XasX1Y22tTout2NuPeO8nXfAgAHJWQPAkwB5FwDRCkYQDBDJYAgRChEJ3CIhuEVV1LdIig+ACAbO
ln04x6mHFlGRaRH1mJbpWoRGfYvK0CFKMl3XRtNNZCPHqENd2qBlumiZbll9x1bXRtOlb6aLHjyu
75Rb32lrWuiyb7rUo/619B0t9zM13avtu+ma1vX2nfrWd3RcG11d2lMfe+DY59poujez77RxdbHP
bKTMbKRvtLe+m+6N6Lvplvd7j9rIMepcb9+v93un3PpOW9NCl33TpR71r6XvN+p7N13Tut6+U9/6
jo5ro6tLe+pjDxz7XBtN92b2nTZRXbORMrORvtHe+m66N6Lvplve7x0d10aOUedG9v1avnfKre+0
NS102Tdd6lE/Ud8Zke/evXtyRgAIAHgbIAYAPgzrHNw+NAy3L4Mt+9YJ6tmHDkcHjTit8uryoZqu
acFdG427uvZlJNJy7TXd6+27yxP13eVmY1m6ro3w0vpOW7fvpksZx6gTp+v23bSiuqXZ6PJEfY/q
0sbVNRtdrUQ23qy+R+2N2uj2HV3TMl10TDeqVV7dOBvhpfUd7va9NBtd3evtO9x0E/Xd5Wbjjew7
bd2+my5lHKNOWX03LePlsdHlifpelq7Z6GolsvFm9T1qb9TGuL67uuiYblTrWnRNC15a3+Fu302L
Mmsfp3u9fXd5or673Gy82r7ffvvtyZsC4G2ABAAMOxCBYCBvsgMYShnH4EQutl6A6AZDiW4A5ZRx
jPoWDZkunIfjoMs5OG66REe05wNAy3TZp5zj1IObFjrowSkze81G2mJPVJcy043aeK19d3Urou9x
NtIOravpu2tjKvXdtfFm9R1dUJputO+UU2ZaN6PvcNOK9t3sNRtpiz1R3ZvRd1e3IvoeZ+O1fO+u
jeXpu2nd7L67Nt6svqMLStNN1HfTuhl9h5tWtO9mr9lIW+yJ6t7MvsOvtu9xNibqe1LXABw5ckTv
vPOO3nrrrXD7/vvva+fOnXr77bdDzpZ9uNXjOcU84IY3ScEB/N133w3rUYfjxsvSpS714GiYFrqU
u7rltRFuumajaRm/GhvL0/fy6lJmujez72YjGqZVXhtvVt9d3bL6fi02wl0bk9F307oaXepSDx7X
d1f3avsONxtNy/iN7nt5dSkz3ZvZd7MRDdMqr43l6XucvVejW1bfr8VGeNRGyq9Xl7ZRXbPXtK5G
l7rUg7taZqOre7V9h6Pjahm/0X0vry5lpns1fefYyZMnVVRYePMDgK+//lpffvmlvvrqqxDl5bZf
Hm77ibjtl4fbfnm47ZeH2355uO2Xh9t+Im775eG2Xx5u++Xhtl8ebvvl4bafiNt+ebjtl4fbfnm4
7ZeH2355uO0n4rZfHm775eG2Xx5u++Xhtl8ebvuJuO2Xh9t+ebjtl4fbfnm47ZeH234ibvvl4bZf
Hm775eG2Xx5u++Xhtp+I2355uO2Xh9t+ebjtl4fbfnm47Sfitl9e/s033ygvL+/mBwAXL14MnznM
iwc8PDw8PDw8Kg48AvjSpUvKz7+JAQBOnyjjr3/9q/72t795eHh4eHh4VDDMJ+fl5t6cAOCLL77Q
6dOnlZ2drZycnO8VcoMPLa7cw8PDw8Mj1ZGVlaXz588rPz//xgUAND5+KlMFBfmhcNyJKzsIaDIz
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
EWT8g6bo47OfaOO4Fnqm3UAdyTypsQ1qBYHAZu1+81Vt3H4ozETDKYBZE7Vwa3a4t2PeSA0YNFGj
RwxV72HzdTL7oLo9W01zNu3S21s2avmCyerZv2R++q/52UoLnM38TQe1c9UkTV79UVB6VP169FSP
fhP0fiB5/kSaqr5QU9Nfey86luEEABeDC+hZvREEMCu3HlBxYbHOFZ7QiiXLtDW4YE5s306N6jVQ
u8Cugb1aqeaL1VW3/TC9e/ht9WlSU7Vq1lHTPtN06sJFHVg/SY1q11Wrsct0KrBv2fC2qlX7ZbXu
NVoHs87rs8+/1Ce5e9S7cR3Va9hQjVv1076M49qUvlw73t+jFQsXa9fHZ5W3O13dekzUic+kS0GW
Obx9bdVr3V0r9p7UO3Mm/v/bu/enKK87juP5o/pndCbjD+mkZibeUIs3qE1Tm+oYhaoErTMmgILV
RRSV6CoigkaDF0BBFhArINeoXESI3HaB5eKn5/s8iyJgDXXMSOb9mvmMu88+13OYPefZPWd157Na
32RfUu+guxOe9yuAIY2PPFPRqeMqKG1xZT2knD1bdeBCyPsPndpD1xQ4UKBe9/hp/XVlZF1UTzji
DeBrrynUF+uWK27FCqWcvq7nYRstP6q+ttvKOBjUE/sO3hrZcJ+uHd2p5a4B35lToAvBsyq+UaUr
+WdUciek86e+d53BGuXnHlNGZo4Ki27oyJcJituwRZdv1yqYtFUr1iQo50yejri/i5YHRUre/ImW
JqSq4kGFsl2H4bFr0CsuB3XadSzykr/SitXrdfJanTfIzxukN98nAO7aRyODrpOWpVWff65lazbp
ZMUjPW+6ru3rl2rZX/eouLZSh10j993xgPZv/Zv+dTCgQCCgQ4F8dbvyLC/8XuevVqksuE/xa5fr
d39Yp1MFJUrftFZxm7fr5n86ZT+8ER0dUMHhnVoT9yft//aortb3KDoWVU9rhY4ezFR65klX78/V
XPmDDqUdUlaOq7PwsO6e26HPln6mba7ceyMjirhO3OwOwNjooMoKTyv3YrUmX0yo2HUyd+deV8vt
k9rgyjz+m2xV1F5RUvyfVVTfrbLc3QpcqtPD0qCST990nbZnKsza5I6zQlnFpfrxYlA/lFap8Gye
ypv6dL/ohPakH1TuiePKyAjoaqhD/Y/vKCtwWc11Bdq+brWWLPlYq/YXuePTASBkMeS9dgDy0/bq
UrN3r6iBh5e1c/s/lfr31doUv1G7UrOUmfoP7Ureq5Rvc/TINV4twST9cWOa7APZrvJcfbXerbsj
VRdqur192P5vHtuljz+JU2LCRiUfyFZra7UyUvdq976AWgeiaipK1xfrNyoxJVOVza0qydqi1WsT
lLghRadP7NPmdSmqabyltK8/1aqVicr+8ZqOpR9RWZt9xtCutct+r8LmqH+4GV52AFwj0u8ajuHY
dCsbfW5TsWz6VcRGso8Ma8g1gJrq0uG9+3Xhdrs3YG7q5xrt2vGdap/0a2JszBvRbaPE/W3DXiKu
oRqOjdq3htoGYtnduTUeNrDKpnFFbN2ITSGz0f4R7zv9wWGb3mXfc/e7Y4/467v92Lq2T5sdEPH2
4Td6czoAbpldk+0v7BqX/v5Bb8T9SHjIn57mGvDISNibZmaPR+xxbBtvtL07jncn/fIY0+ftj473
G1r33F2XnbeVk52jlZ+V27D9a9cSuyZ7zS9Lt45dg80SGLX17Tz8WRTh6bJw2/szCPxjWX283NbK
wFtuU9ne0AFwsembkUhsdoKV//T+rZy9ffjnZB0ZuyZbZr+oNT2bw+oxGh5QMCNVifHL9WnKv9XY
G9XUuJW9XYNNE7UysZkLtswdw9WX1V1/rKysnvx6tk8lZuzfnbNds/2d2DJvQKNb9noHYLou3HV7
deY6j65jYTMQbEaIHd8vRysrv+7CI2PuseucuW3GrJ68c7DjuGN75RmrF6sfqxevPN1+XpaF/8nR
xJR78yi5qL8kJmjJpi8VqHyiydGwa//pABDyoee9dgBGXUPo37k7L6Y0Hn2hkeEeNTW3eI28ov3q
7nymYXena+u9mJxwb76vGt/ezla1dPbFnvkmR4f0uL1FTU1t8r4Wd1t6b5buDW0ydvhOd5f807Mh
/8mLUbU1N6ljwD6EnVBvR6f3cWx0sEstbV3eKuOuQR4f+1lnjyZpa1rQ/3h7FusA2Juu3RHbjwK9
ORPeOhMT7u7dGjt3bd42UWvUbR71uHv+av3Z+5t3/97+XGYvf2Ns/VfPZ+/TftnQGnZrPOY93oLj
n9/8r72ehR5v5vpzt/3fZTJ7fXtu/1GVdbBmLp/5+sxy88p9xutvjLdeVN2PWtXQ+FDPBt3f/dSk
99pr+4tl7nW8PTO3scfTHTery5nrzRfvuqafv+XYCz03O/5QX48aGhrU1tmrCdfw23KTmZk55w2H
EPLh5L12ABaVqSGVlVxR/VMbbT+Xvandv1+nUCikqqqqX5SamhpVh+zxXZeQe16t0Dzr/dqprq7W
rVu3VF5evqDrWeyxa71x44YqKyrmff1dU1N7T3V1dbrn6tmv8/nXe9fYddjP7JaWlnp1Od86v17u
qtr9ndt1192rVXVseWNjo7Zt2zbnDYcQ8uGEDsACJCclzSlAQgghZDHmwrU7794BsDR2DKitJ/yb
TuWDnxQsLiWEvCVnXc5dKVP+1duEkA80ta29etgVfvcOQEPHsPdJwG85TU9Hvd4SIYQQsthjjX+D
a9v+rw5AvesA2IaEEEIIWZx54NL1SzsAW7ZsCY1I6g67uI0IIYQQsjhjjb/Njjt7ruDtHYCVK1fV
5p05r+O5eYQQQghZ5DkTzNfXO7yB7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAz0cf/Rcp2vByuvBe/gAAAABJRU5ErkJggg==</Preview>
  <Form>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
KlewyhWscgWrXMEqV7DKFaxyBatcwXfIFbwYc3nCYXxtes3pC+zwS++R+i3n67mQ/4ex/5uXJrA9
odFcDORcz/5/mLuaEVi1YgJrFyfPvX8e2p/KQfsnVcrL7CQwMnugXg4gPZMvCY6IPxgBD9eKKmGe
mC+CQc9iwAXiGyy/1fzUDBPPnb8Jukvzo/+n9v+cux/7D3WGZdkb6gzfv5WeCPQNTctAu53O8LRy
M11huRualwl7M31p0f2b6Yp+Q2vUYZhb6UqXVm9nXrpM65Y607uhzvA3tD12+dbN9OSWpLc9uJmu
dPjb6Yp8Q0vUa91MV/r6Dc3LQLmhzsg3tFV3ldtxp7qKfjNduSG7K9HMzfSlx3duqC/jG+rKf25q
I+i12VvpSn9wOxZGuaWTrHJDEzPu3JD/PY4M84Z6o9yM2ztWlRvpidq6IUXSuM6tdEVnudP5T5dm
+T4Nr/dCywZmI18u7bRIiLYD66r2fgTqn4btr6gFQBZl0Eomep8AJ65J+z4LOZ3Cq87mW32ejH7O
LVKhzGygjsMCBxuHb1Qp5vUV1Z4DWoMMeCqumYRpuMhqCmiqptiJu/hWI/8PjEWXN/lr1YGyhQVf
mLKrBLFECYF/BLFsdacfQ6gN1KLSgF8AoFn4v6Vaoz13GRSrZVmezYLl/vNlaT5VYaaRbR+h5y9U
kQn/VsPJK2ulPUzKh1ViKltnc2T/p2TPP08pph+Lc1UNps+WTiuzSmZkeVql0laptFUqbZVKW6XS
Vqm0VSptlUpbpdJWqbRVKm2VSlul0laptFUqbZVKW6XSVqm0VSptlUpbpdJWqbRVKu2HpNIWVdwv
vXrqt0za36P9H5ZFi1x6+dcTCOvSbOI3yKKV2Vp6nLibS579s5ftjGwz3NgJkJ5jx74Wtotdfk3N
L5ft/DY5H4bxlr2s4bH/NZqrlRzB58F6f1+sL3YrllxM+ZdSTuq6S+qKCfm42+lKKmSpTn8eHSyG
98X07rsULpe2NQjApCVvUVzi9hTxrPt1Zpd8boY+TDNLvPtwOXyeFIzPmnccTC0Mann6ta+pe27Z
3oco9cIvnv3x8z98RckZYy4bS/v9S84Y8wh853tP+c7vTMcIlq/iQ17JN/7X3UwFoeosAfBlrUdP
0ndf4LP/e+SvbkE2LOuoA8WdHw9/Xv3u440bBAz8eehl9S5jEl4osHR2dK8Sx0dR+BMSaT586iKJ
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
ecWtNw2X21k07z8/upodcrQQAnkXMI/u81p9ybmuMZwr8bSQCJzNrfl2PElW4u7T8doQXWx0jiOH
nGaU191fE5UmuI3IL1YZNXe0WzIMSRLy9hSsbmPCYo90U9MpXd1If8ixV8ujWP163XZLPiVdHIuB
9Sa3G+hCqOUd6SifuGj1+fkBnTnx7AMwFu2kQ7MtykDmVgeUhqghuCG5l72Ue33aMr1X3iHDbDZv
IjkfasC8ZD/SHiFLQpESSCN79W0KotHLHHmTRp0jVViFnrF7Pp/DQ8SlEcGxR0n2+ePNi5T2vIFq
27ZRa7UtGRJnCoioOmoelVRzL+Xe50e8A7p15hCGHa8XsauEv/psuZMxWolvPqCqfixpl6QKTl+h
9gFOfdfnRXgLs+ilqq8TOMbUFo5iWKaL22+zpjETdXeg00JpZT8lMcthknw/EVgccUeaX1k2H5T9
Tm2A6OFLR1iVMVJS1IxdHCj4S4KBKAv5jgGvcbMgrVKQpDTDGX+PT3xTTB15VN7UV/TXJjrL9fdW
q5Yt5YW18nKYowsmGmoPJ4rZejw289CSNqf4U//84NIULvn6DI8Dfir+aaP5iDmJ0zX+uDTNtO8G
UO+3nKBtCglfzQUolWUf1ZN9g15sxB5Ig1KKPo1CWT8/ZIPtTg1qh1vX1StVmIS7qKc2Du31f1Ve
9+5GgyvB2jlrUBYFqe6wnX/QRaJ/BGLfe7Tp1+yv+/+pwPoPOvgbhtj/mfDxDxMe/hNx4v+B9v8D
7f8H2v/XgPb3pj+Rv0b+mOmUzj8plG79pHv/GaS+/yCqB/neBI6/+8Z/o+oxy7j47yopPV5t/bW4
DcX+nGH+v82vM1K/d870v7uFXuu7f50ayfZfc/Jrf+pXpKReY/OvFetfzm39w7H4Xq6EIV/3Xv6a
5NTv+Ow33/2zT6mf//q5qsPvPbP+R+bJ3xv43VUD/qjT5W8orabd8lV57HefNOHfHY8Mly4u0vE/
dOIf0unrR7bfuq/PTH/Hkf9jebb/MSv/1qmrW2aapdfcj9O/ms5SSVt2zBVSf8non8B/s+hf1p/7
gxr4bdH1Ky9+mb8VdfnxbIz7tg27RCm79Ec0b2B+vnKtvSbpj2hf8mD0H9IuzfoRzWrC7bga/Iab
P6R9F4Ppl9maw3n5Bpc/opEtTzFFGtc/om1Dv13PL9Lmh3xz/2adaHE/ooEj+yuiwX/nHp9XlHNq
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
Ivjvv4Pgn/30Ld3n3/2H0f5/5pg+v+P2uIjaPP3rZtx6jvn7NkxTxvVfj+yPX67/O/Dlo1/a/Ttg
PKo0/v6Xrz9/N7/69yhfJ+R4/ptftkm3Tf/Gd+Nz+rfbeUfnfUcnPSUWzd34++/+/z74+++8dJzK
rv0D8m/X97/ff8cszbyM6R/adJnHqPn9d+byOIdzYohbV6ftHx44ftJNFANJGEmvBPm77+fy4ySm
H7rEfvdt+vhTg29UCXYq5C8/++slNEfzMqnRI23+jjL60mnz7vSPVPIsW27vyzFlozn9KaHRUVx/
b/f/x0r4WYmdU0i/b0Y30duqftli+U9G+o3awonffwf+/Gr7un7+3+jdR/qlj38tDZv+V8lNv7GC
f05fP/b7rf4OI3+Bvr508V0UnxDr9Gqm/91X1U3fde1fuvX/vvp7NFFb//3U9qW7b3WFyLcr67v9
2fyvc3zxeaE/dZSO63mH7/7667+oOPsEne8O6W7/m+trPPuaz74e3f7Hd8z9o3tOa7LLvDjnGxdl
k5zaOANt187jKepvUCIbjbUwRq+flSndjUk6OvOrOaWod+3P+0O2e0d7vmyan/2o2sXRfErod/9x
Cuf6jdb0nwjjG80JIk5njSA/H4hv0UNqk3Q//cU3eoqf/Zh/ytMfo/6UUNRM/1Xv/483QjZt0vyr
Ev/GlviPsas/ze9bjQtEf6lxQb/OuH51qNHSdpHOv//NTaaJttd57y/h8696/ynb+EKDfvjj+efv
SVTp0Ya9XRUh795US3fcgnPz8yf6/R8VMFRwfmPz5ICR9wVaSOibe/I4VTAZYC9o67wW97LN8e7J
07iV9/zGcsHYrWrf5mSFOCkoP+dWYbm0b3v1JGkWrxh4pej0AD9of4t6a6PckpEGn+ELZQhkhnYG
9fPD6u/+dL/3C2eoEsMorYu1SuP2TOlwhahjHArcsMeNtLKlgolXmJAXIsbx1bhkqYEA+4qJVnOD
4eeLpj8/tpNuvtBBDZKgxdYX97pNiX9TMQIG2IZEXeLWZGKDGJyvgh6D+U7SIK/eZOyCUI613YZZ
i30vvGJzaX9+YNDmJ5Mi047ruMReV5vGl5uILwKZj0+KyIR9zKekeSilNWWzk3KPItHawOI3v83i
u9VBWpF60D4z++fHNX+mffDIu4slYdxT22SMY4TigVkJitYRjoXKngdHe+GblSnW2Ljn5EEpWW/d
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</Form>
  <Code><![CDATA[$MainForm_Load = {
	#TODO: Initialize Form Controls here
	Import-Module ActiveDirectory
	
	#-----------------------------
	## hide or show specific output areas in GUI
	#-----------------------------
	$datagridview_MapDrives.Visible = $false
	
	#-----------------------------
	## test for RSAT/AD tools
	#-----------------------------
	if ($(Test-Path "C:\Windows\system32\dsa.msc") -eq $false)
	{
		[System.Windows.Forms.MessageBox]::Show("AD tools not detected. Have you installed them?", "Status", 4)
	}
	
	<#
	#-----------------------------
	## Formatting font colors
	#-----------------------------
	if ($getdate -gt $adminexpire)
	{
		$label_AdminExpiresOn.ForeColor = 'Red'
	}
	elseif ($getdate -gt $adminexpire)
	{
		$label_AdminExpiresOn.ForeColor = 'Yellow'
	}
	else
	{
		$label_AdminExpiresOn.ForeColor = 'White'
	}
	#>
	
	#-----------------------------
	## setting/updating 'output' and 'bin' folders and checking for new files for app
	#-----------------------------
	$checkoutputfolder = Test-Path $fileoutput
	if ($checkoutputfolder -eq $false)
	{
		New-Item $fileoutput -Type directory -Force
	}
	
	Copy-Item '\\kiewitplaza\ktg\Active\kss\KSS_Toolkit\KSS MultiTool\bin\' 'c:\Program Files\KSS\KSS Toolkit\' -Recurse -Force
	
	#-----------------------------
	## checking to see if Log file exists, C:\Windows\Logs\KSSTools\, create if it does not
	#-----------------------------
	$logfolder = Test-Path $LogPath1
	
	if ($logfolder -eq $false)
	{
		new-item -path C:\Windows\Logs -name KSSTools -itemtype directory -Force
	}
	
	#-----------------------------
	## starting new log file
	#-----------------------------
	Log-Start -LogPath $LogPath -LogName "$LogTimeStamp.csv" -ScriptVersion "1.5"
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, MultiTool launched"	
}


$EmailSubmit_Click={
	#TODO: Place custom script here	
	$EmailTo = "ksstools@kiewit.com "
	$EmailBody = $EmailBody -replace "System.Windows.Forms.TextBox, Text: "
	$EmailSubject = $EmailSubject -replace "System.Windows.Forms.TextBox, Text: "
	
	Send-MailMessage -To $EmailTo -Subject $EmailSubject -Body $EmailBody -From $EmailAddress -SmtpServer mail.o365.kiewit.com
	
	$sleep
	$EmailTo.text = " "
	$EmailSubject.clear()
	$EmailBody.clear()
	$sleep
	
	$richtextbox_ConfirmEmailSent.Clear
	$richtextbox_ConfirmEmailSent.AppendText("Message Sent") | Out-String
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Sending email in Contact us tab :: $EmailSubject $EmailBody"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Sending email in Contact us tab"
	
}

$button_DirectReports_AD_Click={
	#TODO: Place custom script here		
	$splitcontainer_AD_User.Visible = $false
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersGroups.Visible = $false
	$groupbox_AD_BulkPW.Visible = $false
	$groupbox_AD_AdvancedSearch.Visible = $false
	$richtextbox_AD_UserEnabled.Visible = $false
	$richtextbox_Email_ADUser.Visible = $false
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace "System.Windows.Forms.TextBox, Text: "
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	try
	{
		$directreports = Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } -Properties directreports | select-object -ExpandProperty directreports | get-aduser -Properties employeeid | select-object Name, employeeid
		if ($directreports.length -eq "0")
		{
			$richtextbox_AD_UsersLeft.Text = "No Results found under this user."
		}
		else
		{
			$richtextbox_AD_UsersLeft.Visible = $false
			$datagridview_AD_DirectReports.Visible = $true
			$AD_DT = ConvertTo-DataTable -InputObject $directreports
			Load-DataGridView -DataGridView $datagridview_AD_DirectReports -Item $AD_DT
		}
	}
	catch
	{
		$richtextbox_AD_UsersLeft.Text = "Error encountered or no results found."
	}
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Direct Report script on AD User tab, Results displayed for user searched: $toolstrip_textbox_User_AD"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Direct reports under AD:User tab"
	
}

$button_ExportDirectReports_AD_Click = {
	#TODO: Place custom script here
	
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersGroups.Visible = $false
	$splitcontainer_AD_User.Visible = $false
	$groupbox_AD_BulkPW.Visible = $false
	$groupbox_AD_AdvancedSearch.Visible = $false
	
	#$groupbox_ADUser_ExtendExpiration.Visible = $false
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace "System.Windows.Forms.TextBox, Text: "
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	$richtextbox_AD_UsersLeft.Text = "Processing..."
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } -Properties directreports | select-object -ExpandProperty directreports | get-aduser -Properties employeeid | select-object Name, employeeid | Export-Csv "$fileoutput\directreport.csv" -Encoding ascii -NoTypeInformation
	
	Start-Process excel.exe -Argumentlist "$fileoutput\directreport.csv"
	
	<#
	$oXL = New-Object -comobject Excel.Application
	$oXL.Visible = $true
	$oXL.DisplayAlerts = $False
	$file = "$installpath\output\$manager.csv"
	$oXL.workbooks.OpenText($file, 437, 1, 1, 1, $True, $True, $False, $False, $False, $False)
	#>
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Direct Report export script, Results exported :: Script ran for $DirectReports"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Export of direct reports under AD:User tab"
}

$button_CheckADGroups_ChangeOwnerOfGroups_Click={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $true
	$splitcontainer_AD_Group.Visible = $false
	$splitcontainer_AD_Group.Panel1.Visible = $false
	$splitcontainer_AD_Group.Panel2.Visible = $false
	#$richtextbox_ADGroups_Right.Visible = $false
	#$richtextbox_ADGroups_GroupsMember.Visible = $false
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$textbox_OldOwner_ChangeOwnerADGroup = $textbox_OldOwner_ChangeOwnerADGroup -replace "System.Windows.Forms.TextBox, Text: "
	$textbox_OldOwner_ChangeOwnerADGroup = $textbox_OldOwner_ChangeOwnerADGroup.trim()
	$richtextbox_AD_GroupsOutput.Text = "Processing......"
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	$GroupsOwned = get-adgroup -filter { managedby -eq $textbox_OldOwner_ChangeOwnerADGroup } | select samaccountname | Format-Table -AutoSize -HideTableHeaders | Out-String
	if ($GroupsOwned -ne $null)
	{
		$richtextbox_AD_GroupsOutput.Text = "$textbox_OldOwner_ChangeOwnerADGroup owns these groups: $GroupsOwned"
	} else {
		$richtextbox_AD_GroupsOutput.Text = "User owns no groups."
	}
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Get AD groups for Current Owner from Change Owner of AD groups tab, $toolstrip_textbox_User_AD was the value entered"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Checking groups that user owns under AD:Users tab"
	
}

$button_ValidateADAccountNewOwner_ChangeOwnerOfGroups_Click={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $true
	$splitcontainer_AD_Group.Visible = $false
	$splitcontainer_AD_Group.Panel1.Visible = $false
	$splitcontainer_AD_Group.Panel2.Visible = $false
	#$richtextbox_ADGroups_Right.Visible = $false
	#$richtextbox_ADGroups_GroupsMember.Visible = $false
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$textbox_NewOwner_ChangeOwnerADGroup = $textbox_NewOwner_ChangeOwnerADGroup -replace "System.Windows.Forms.TextBox, Text: "
	$textbox_NewOwner_ChangeOwnerADGroup = $textbox_NewOwner_ChangeOwnerADGroup.trim()
	$richtextbox_AD_GroupsOutput.Text = "Processing......"
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	
	$validateADUser = Get-ADUser $textbox_NewOwner_ChangeOwnerADGroup
	if ($validateADUser -ne $Null)
	{
		$richtextbox_AD_GroupsOutput.Text = $textbox_NewOwner_ChangeOwnerADGroup
		$richtextbox_AD_GroupsOutput.AppendText(" does exist.")
		
		#-----------------------------
		## writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Validate AD User script from Change Owner of AD groups tab, $textbox_NewOwner_ChangeOwnerADGroup does exist."
		
	}
	else
	{
		$richtextbox_AD_GroupsOutput.Text = ""
		$richtextbox_AD_GroupsOutput.AppendText("No account found. Please check spelling.")
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Validate AD User script from Change Owner of AD groups tab, $textManager2Lookup was the value entered"
		
	}
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Validating new owner account for Group ownership swap under AD:Users tab"
	
}

$button_ChangeOwnerOfGroups_Click={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $true
	$splitcontainer_AD_Group.Visible = $false
	$splitcontainer_AD_Group.Panel1.Visible = $false
	$splitcontainer_AD_Group.Panel2.Visible = $false
	#$richtextbox_ADGroups_Right.Visible = $false
	#$richtextbox_ADGroups_GroupsMember.Visible = $false
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$textbox_OldOwner_ChangeOwnerADGroup = $textbox_OldOwner_ChangeOwnerADGroup -replace "System.Windows.Forms.TextBox, Text: "
	$textbox_NewOwner_ChangeOwnerADGroup = $textbox_NewOwner_ChangeOwnerADGroup -replace "System.Windows.Forms.TextBox, Text: "
	$textbox_OldOwner_ChangeOwnerADGroup = $textbox_OldOwner_ChangeOwnerADGroup.trim()
	$textbox_NewOwner_ChangeOwnerADGroup = $textbox_NewOwner_ChangeOwnerADGroup.trim()
	$richtextbox_AD_GroupsOutput.Text = "Processing......"
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables to get current owner's groups
	#-----------------------------
	$GroupsOwned = get-adgroup -filter { managedby -eq $textbox_OldOwner_ChangeOwnerADGroup }
	
	#-----------------------------
	# update new owner to discovered groups
	#-----------------------------
	ForEach ($Group in $GroupsOwned)
	{
		set-adgroup $Group -managedby $textbox_NewOwner_ChangeOwnerADGroup
	}
	
	#-----------------------------
	# check to see if any groups did not get changed.
	#-----------------------------
	$CheckChangeOwnerOfADGroup = $null
	$CheckChangeOwnerOfADGroup = get-adgroup -filter { managedby -eq $textbox_OldOwner_ChangeOwnerADGroup } | select samaccountname | Format-Table -AutoSize -HideTableHeaders | Out-String
	
	if ($CheckChangeOwnerOfADGroup -eq $null)
	{
		$richtextbox_AD_GroupsOutput.Text = "All groups have changed ownership"
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Change AD User script from Change Owner of AD groups tab, Groups ownership changed to $textbox_NewOwner_ChangeOwnerADGroup succesfully"
		
	}
	else
	{
		$richtextbox_AD_GroupsOutput.Text = "Below is a list of any groups that were not changed:"
		$richtextbox_AD_GroupsOutput.AppendText($CheckChangeOwnerOfADGroup)
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Change AD User script from Change Owner of AD groups tab, Groups ownership changed to $textbox_NewOwner_ChangeOwnerADGroup failed :: $CheckChangeOwnerOfADGroup"
		
	}
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Changing ownership of Groups under AD:Users tab"
	
}

$button_LookUpMembers_UsersInGroup_Click={
	#TODO: Place custom script here
	
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $false
	$datagridview_ADGroupMember.Visible = $true
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	$richtextbox_AD_GroupsOutput.Text = "Processing......"

	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	$AD_DT = ConvertTo-DataTable -InputObject $(Get-ADGroupMember $toolstrip_textbox_User_AD -Recursive | Get-ADUser -Properties samaccountname | Select-Object samaccountname)
	Load-DataGridView -DataGridView $datagridview_ADGroupMember -Item $AD_DT
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$(Get-Date).tostring('MM-dd-yyyy') $(get-date -UFormat %R), $userName, $pcname, Running Look up group members script from Users in groups tab, $toolstrip_textbox_User_AD was the value entered"

	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, looking up members of a group in AD:Users tab"
	
}

$button_ExportMembersList_UsersInGroups_Click={
	#TODO: Place custom script here
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$richtextbox_AD_GroupsOutput.Text = "Processing......"
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	Get-ADGroupMember $toolstrip_textbox_User_AD.text -Recursive | Get-ADUser -Properties samaccountname | select samaccountname | Sort-Object | Export-Csv "c:\Temp\$($toolstrip_textbox_User_AD.Text).csv"
	
	Start-Process "c:\Temp\$($toolstrip_textbox_User_AD.Text).csv"
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Look up group members script from Users in groups tab, $toolstrip_textbox_User_AD was the value entered and it was successfully exported"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Exporting users in a group in AD:Users tab"
	
}

$button_SearchForUser_DirectReports_Click={
	#TODO: Place custom script here
	
	$MainForm.Refresh()
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$textManager2Lookup = $textManager2Lookup -replace $replace
	$richtext_DirectReports.Text = "Searching......"
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	Wait-Job -Id { $SearchForUser = search-aduser $textManager2Lookup }
	#Wait-Job
	$richtext_DirectReports.Text = ($SearchForUser)
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Search user script from Direct Reports tab, $textManager2Lookup was the value entered :: results were $SearchForUser"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Running Search user script from Direct Reports tab"
	
	
}

$button_ReviewLogsInFileExpl_Click={
	#TODO: Place custom script here
	
	Invoke-Item $LogPath1
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching windows explorer to \logs"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Reviewing log files in File Explorer"
	
	
}

$button_LoadLogFiles_Click={
	#TODO: Place custom script here
	$richtextbox_Logs.Clear()
	
	$logFileNames = Get-ChildItem "$LogPath1\*.*" -Name | Sort-Object -Descending | Format-Table Name | Out-String
	foreach ($logfilename in $logFileNames) {
		$richtextbox_Logs.Text = $logfilename
	}
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Listing Log files in GUI"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Listing Log files in GUI"
}

$button_ReviewInGUI_Click={
	#TODO: Place custom script here
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$textbox_LogFileToReview = $textbox_LogFileToReview -replace $replace
	$textbox_LogFileToReview = $textbox_LogFileToReview.trim()
	
	$logFileContent = Get-Content "$LogPath1\$textbox_LogFileToReview" | Out-String
	$richtextbox_Logs.Clear()
	$richtextbox_Logs.AppendText($logFileContent)
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Displaying log file in GUI, Script ran. $textbox_LogFileToReview displayed in GUI."
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Reviewing Log Files in GUI"
	
}

$button_ReviewInNotepad_Click={
	#TODO: Place custom script here
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$textbox_LogFileToReview = $textbox_LogFileToReview -replace $replace
	$textbox_LogFileToReview = $textbox_LogFileToReview.trim()
	
	notepad "$LogPath1\logs\$textbox_LogFileToReview"
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Displaying log file in notepad, Script ran. $textbox_LogFileToReview displayed in notepad."
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Viewing log file in notepad"
	
}

$button_EmailLogFiles_Click={
	#TODO: Place custom script here
	
	Add-Type -assembly "system.io.compression.filesystem"
	[io.compression.zipfile]::CreateFromDirectory($LogPath, $output)
	
	Send-MailMessage -From "ksstools@kiewit.com" -To "ksstools@kiewit.com" -Subject "All logs from Kietools KSS Edition" -Attachments $output -SmtpServer mail.o365.kiewit.com
	
	Remove-Item $output -Force
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Emailing log files to ksstools, $output"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Emailing log files to ksstools"
	
}

$button_GetNTFSPermissions_Click= {
	#TODO: Place custom script here
	$Error.clear()
	
	try
	{
		$results = $(Get-Acl -Path $textbox_NTFSPermissions.Text).access
		
		$acl_permissions = @()
		foreach ($identity in $results)
		{
			$acl_permissions += $identity | Where-Object { $_.identityreference -notlike "S-1-5-21-*" }
		}
		
		$datagridview_NTFS_AcessList.Visible = $true
		$richtextbox_NTFSPermissions.Visible = $false
		
		$NTFS_DT = ConvertTo-DataTable -InputObject $($acl_permissions | Select-Object FileSystemRights, AccessControlType, IdentityReference, IsInherited)
		Load-DataGridView -DataGridView $datagridview_NTFS_AcessList -Item $NTFS_DT
	}
	catch
	{
		$datagridview_NTFS_AcessList.Visible = $false
		$richtextbox_NTFSPermissions.Visible = $true
		$richtextbox_NTFSPermissions.Text = $Error.Exception.Message
	}
	
	$textbox_NTFS_ADGroup.Clear()
	$textbox_NTFS_ADGroupApproval.Clear()
	$textbox_NTFS_ADGroupOwner.Clear()
	$textbox_NTFS_ADGroupOwnerEmail.Clear()
	$richtextbox_NTFS_OwnerInfoError.Clear()
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Looking up NTFS permisions, File share looked up: $richtextbox_NTFS_OwnerInfoError"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Looking up NTFS permisions"
}

$buttonClearpassLauncher_Click={
	#TODO: Place custom script here
	
	$url = "https://clearpass.kiewit.com/tips/tipsLogin.action"
	$username = [environment]::UserName
	#$password = "gibberish"
	
	
	$ie = New-Object -com internetexplorer.application;
	$ie.visible = $true;
	$ie.navigate($url);
	
	
	while ($ie.Busy -eq $true)
	{
		Start-Sleep -Milliseconds 1000;
	}
	$ie.Document.getElementById("username").value = $username
	#$ie.Document.getElementByID("password").value = $password
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Clearpass web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Clearpass web interface"
	
}

$button_Unlock_Click={
	#TODO: Place custom script here
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersGroups.Visible = $false
	$splitcontainer_AD_User.Visible = $false
	$groupbox_AD_BulkPW.Visible = $false
	$richtextbox_AD_UsersLeft.Visible = $true
	$datagridview_AD_DirectReports.Visible = $false
	$groupbox_AD_AdvancedSearch.Visible = $false
	$richtextbox_AD_UserEnabled.Visible = $false
	$richtextbox_Email_ADUser.Visible = $false
	
	#-----------------------------
	# cleaning up and defining variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	$sleep
	
	#-----------------------------
	# unlock on PDC
	#-----------------------------
	if ($toolstrip_textbox_User_AD -ne $null)
	{
		Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } | Unlock-ADAccount 

		$lockedstill = Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } –properties lockedout | Select-Object lockedout
		$sleep
		If ($lockedstill.lockedout -eq $true)
		{
			$richtextbox_AD_UsersLeft.Text = "Unlock failed. Please try again with ADUC."
		}
		else
		{
			$richtextbox_AD_UsersLeft.Text = "User is now unlocked on PDC. Replication can take up to 10 minutes for all DCs. `n"
		}
		
		#-----------------------------
		# unlocking on all DCs
		#-----------------------------
		$unlock_code =
		{
			$DCs = Get-ADDomainController -Filter *
			
			foreach ($DC in $DCs)
			{
				Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } | Unlock-ADAccount -Server $DC
			}
		}
		
		Start-Job $unlock_code
		
		#-----------------------------
		# continue to unlock for 5 minutes
		#-----------------------------
		
		$code = {
			$i = 0
			do
			{
				Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } | unlock-adaccount
				sleep -Seconds 5
				$i = $i + 1
			}
			until ($i -eq "120")
		}
		
		Start-Job $code
	}
	else
	{
		$richtextbox_AD_UsersLeft.Text = "Please enter a name of a user to unlock."
	}
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Unlocking user, $toolstrip_textbox_User_AD is now unlocked"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Unlocking user under AD:User tab"
	
}

$button_ClearpassLauncher_Click={
	#TODO: Place custom script here
	
	Start-Process "https://clearpass.kiewit.com/tips/welcome.action"

	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching clearpass website"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching clearpass website"
	
}

$button_LogRythmViaChrome_Click={
	#TODO: Place custom script here
	
	$chromex64exists = Test-Path "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
	$chromex86exists = Test-Path "C:\Program Files\Google\Chrome\Application\chrome.exe"
	
	if (($chromex64exists -eq $true) -or ($chromex86exists -eq $true))
	{
		Start-Process chrome.exe lr.kiewitplaza.com
	}
	else
	{
		$richtextbox_AD_UsersLeft.Text = "Chrome does not seem to be installed"
	}
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Logrythm website in Chrome browser"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Logrythm website in Chrome browser"
	
}

$button_LockoutStatusTool_AD_Click={
	#TODO: Place custom script here
	
	Start-Process $lockoutpath -WorkingDirectory "C:\Program Files (x86)"
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching lockout status tool"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching lockout status tool"
}

$toolstripbutton_GetInfo_ADUser_Click = {
	#TODO: Place custom script here
	$Error.clear()
	
	$groupbox_ADuser_Output.Visible = $true
	$splitcontainer_AD_User.Visible = $true
	$groupbox_AD_BulkPW.Visible = $false
	$groupbox_AD_AdvancedSearch.Visible = $false
	$richtextbox_AD_UserEnabled.Visible = $true
	$richtextbox_Email_ADUser.Visible = $true
	
	#-----------------------------
	# formatting output for AD object
	#-----------------------------
	$formatgivenname = @{ Label = ''; Expression = { $objecttype.givenname } }
	$formatlastname = @{ Label = ''; Expression = { $objecttype.sn } }
	$formatupn = @{ Label = ''; Expression = { $objecttype.displayname } }
	$formatname = @{ Label = ''; Expression = { $objecttype.name } }
	$formatupn1 = @{ Label = ''; Expression = { $objecttype.userPrincipalName } }
	$samaccountname = @{ Label = ''; Expression = { $objecttype.samaccountname } }
	$employeeid = @{ Label = ''; Expression = { $objecttype.employeeid } }
	$Title = @{ Label = ''; Expression = { $objecttype.title } }
	
	$district = @{ Label = ''; Expression = { $objecttype.company } }
	$formatemail = @{ Label = ''; Expression = { $objecttype.mail } }
	$ipphone = @{ Label = ''; Expression = { $objecttype.ipphone } }
	$mobilephone = @{ Label = ''; Expression = { $objecttype.mobile } }
	$siteid = @{ Label = ''; Expression = { $objecttype.physicalDeliveryOfficeName } }
	
	$lockout = @{ label = ''; expression = { $objecttype.lockouttime } }
	$enabled = @{ label = ''; expression = { $objecttype.enabled } }
	$UserOU = @{ label = ''; expression = { ($objecttype.CanonicalName -replace "KIEWITPLAZA.com/") } }
	$accountexpires = @{ Label = ''; Expression = { $objecttype.AccountExpirationDate } }
	$passwordlastset = @{ Label = ''; Expression = { [datetime]::fromFileTime($objecttype.pwdlastset) } }
	
	$hidefromGAL = @{ Label = ''; Expression = { $objecttype.msExchHideFromAddressLists } }
	
	$accountcreated = @{ Label = ''; Expression = { $objecttype.whenCreated } }
	$accountudpated = @{ Label = ''; Expression = { $objecttype.whenChanged } }
	
	$sip = "msRTCSIP-PrimaryUserAddress"
	$formatSIP = @{ Label = ''; Expression = { $objecttype.$sip } }
	
	$space = @{ Label = ''; Expression = { " " } }
	$blank = @{ Label = ''; Expression = { "-------------------------------------------------" } }
	$divider = "----------------------------------------------"
	
	$ownerformatting = @{ Label = ''; Expression = { $owner.samaccountname } }
	
	$description = @{ Label = ''; Expression = { $objecttype.description } }
	
	#-----------------------------
	# formatting output for Exchange object
	#-----------------------------
	$formatCustomAttribute1 = @{ Label = ''; Expression = { $objecttype.extensionAttribute1 } }
	$formatCustomAttribute11 = @{ Label = ''; Expression = { $objecttype.extensionAttribute11 } }
	$formatCustomAttribute12 = @{ Label = ''; Expression = { $objecttype.extensionAttribute12 } }
	$formatGAL = @{ Label = ''; Expression = { $objecttype.msExchHideFromAddressLists } }
	
	#-----------------------------
	# searching for object
	#-----------------------------
	
	$objecttype = search-AD -adobject $toolstrip_textbox_User_AD.Text
	
	if ($objecttype -eq $null)
	{
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.Text
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
		
		$objecttype = search-AD -adobject $toolstrip_textbox_User_AD
	}
	
	if ($objecttype -eq $null)
	{
		#$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.Text
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.replace(' ', '')
		
		$objecttype = search-AD -adobject $toolstrip_textbox_User_AD
	}
	
	if ($objecttype -eq $null)
	{
		#$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.Text
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.replace(' ', '.')
		
		$objecttype = search-AD -adobject $toolstrip_textbox_User_AD
	}
	
	#-----------------------------
	# checking tab and displaying proper info per tab
	#-----------------------------
	if ($tabcontrol_MS.SelectedTab -eq $tabpage_MS_AD)
	{
		$tabcontrol_AD.SelectedTab = $tabpage_AD_Users
		
		if ($objecttype -eq $null)
		{
			$richtextbox_AD_UsersGroups.visible = $false
			$richtextbox_AD_UsersRight.visible = $false
			$splitcontainer_AD_User.Visible = $false
			$richtextbox_AD_UsersLeft.Visible = $false
			$groupbox_AD_AdvancedSearch.Visible = $true
			$groupbox_AD_AdvancedSearch.Text = "No results found. Please enter a valid PERNR or [partial] username, displayname, or email."
			
		}
		elseif ($objecttype.count -gt "1" -or $objecttype.length -gt "1")
		{
			$tabcontrol_AD.SelectedTab = $tabpage_AD_Search
			
			$AD_DT = ConvertTo-DataTable -InputObject $($objecttype | Select-Object ObjectClass, sAMAccountName, Name, Mail, EmployeeID, Title, company, physicalDeliveryOfficeName)
			$AD_DT.Columns[6].ColumnName = "District"
			$AD_DT.Columns[7].ColumnName = "Site ID"
			
			Load-DataGridView -DataGridView $datagridview_ADObjectSearch -Item $AD_DT
		}
		elseif ($objecttype.objectclass -eq "group")
		{
			$toolstrip_textbox_User_AD.Clear()
			$toolstrip_textbox_User_AD.Text = $objecttype.samaccountname
			$tabcontrol_AD.SelectedTab = $tabpage_AD_Groups
			
			$groupbox_ADGroups_ChangeCustom.Visible = $false
			$groupbox_ADGroups.Visible = $true
			$datagridview_ADGroupMember.Visible = $false
			$splitcontainer_AD_Group.Visible = $true
			$splitcontainer_AD_Group.Panel1.Visible = $true
			$splitcontainer_AD_Group.Panel2.Visible = $true
			$groupbox_AD_AdvancedSearch.Visible = $false
			$groupbox_ADGroups_MassChange.Visible = $true
			
			$owner = Get-ADUser $objecttype.managedby
			
			$objectlist = $objecttype | format-list $formatname, $ownerformatting, $blank, $district, $formatemail, $hidefromGAL, $blank, $accountcreated, $accountudpated, $blank, $description | Out-String
			
			$richtextbox_AD_GroupsOutput.Text = "This is a Group `n"
			$richtextbox_AD_GroupsOutput.AppendText(" `n")
			$richtextbox_AD_GroupsOutput.AppendText("Display Name:`n")
			$richtextbox_AD_GroupsOutput.AppendText("Owner:`n")
			$richtextbox_AD_GroupsOutput.AppendText(" `n")
			$richtextbox_AD_GroupsOutput.AppendText("District:`n")
			$richtextbox_AD_GroupsOutput.AppendText("Email:`n")
			$richtextbox_AD_GroupsOutput.AppendText("Hidden from GAL:`n")
			$richtextbox_AD_GroupsOutput.AppendText(" `n")
			$richtextbox_AD_GroupsOutput.AppendText("Account created: `n")
			$richtextbox_AD_GroupsOutput.AppendText("Account last modified: `n")
			$richtextbox_AD_GroupsOutput.AppendText(" `n")
			$richtextbox_AD_GroupsOutput.AppendText("Description:")
			
			$richtextbox_ADGroups_Right.Text = "$objectlist"
			
			$groups = $objecttype.memberof -replace ",OU=.*"
			$groups1 = $groups -replace "CN=" | Sort-Object | out-string
			$richtextbox_ADGroups_GroupsMember.Text = "Groups this is a member of:"
			$richtextbox_ADGroups_GroupsMember.AppendText(" `n")
			$richtextbox_ADGroups_GroupsMember.AppendText("$groups1")
			
		}
		elseif ($objecttype.objectclass -eq "computer")
		{
			$toolstrip_textbox_User_AD.Text = $($objecttype.samaccountname).replace("$","")
			$tabcontrol_AD.SelectedTab = $tabpage_AD_PCs
			$toolstripbutton_PCInfo_AD.performclick()
		}
		elseif ($objecttype.objectclass -eq "contact")
		{
			$tabcontrol_AD.SelectedTab = $tabpage_AD_Contacts
			$toolstrip_textbox_User_AD.Text = $objecttype.name
			
			$splitcontainer_AD_User.Visible = $true
			$richtextbox_AD_ContactsLeft.Visible = $true
			$richtextbox_AD_ContactsLeft.Clear()
			$richtextbox_AD_ContactRight.Visible = $true
			$richtextbox_AD_ContactRight.Clear()
			$richtextbox_AD_ContactOther.Visible = $true
			$richtextbox_AD_ContactOther.Clear()
			$groupbox_AD_AdvancedSearch.Visible = $false
			
			$owner = Get-ADUser $objecttype.manager

			$objectlist = $objecttype | format-list $formatgivenname, $formatlastname, $formatupn, $blank, $ownerformatting, $blank, $district, $siteid, $blank, $accountcreated, $accountudpated, $blank, $formatemail, $hidefromGAL, $blank, $description | Out-String
			
			$richtextbox_AD_ContactsLeft.Text = "This is a Contact `n"
			$richtextbox_AD_ContactsLeft.AppendText(" `n")
			$richtextbox_AD_ContactsLeft.AppendText("First name: `n")
			$richtextbox_AD_ContactsLeft.AppendText("Last Name: `n")
			$richtextbox_AD_ContactsLeft.AppendText("Display Name:`n")
			$richtextbox_AD_ContactsLeft.AppendText(" `n")
			$richtextbox_AD_ContactsLeft.AppendText("Owner/Manager: `n")
			$richtextbox_AD_ContactsLeft.AppendText(" `n")
			$richtextbox_AD_ContactsLeft.AppendText("District:`n")
			$richtextbox_AD_ContactsLeft.AppendText("Site ID: `n")
			$richtextbox_AD_ContactsLeft.AppendText(" `n")
			$richtextbox_AD_ContactsLeft.AppendText("Account created: `n")
			$richtextbox_AD_ContactsLeft.AppendText("Account last modified: `n")
			$richtextbox_AD_ContactsLeft.AppendText(" `n")
			$richtextbox_AD_ContactsLeft.AppendText("Email:`n")
			$richtextbox_AD_ContactsLeft.AppendText("Hidden from GAL:`n")
			$richtextbox_AD_ContactsLeft.AppendText(" `n")
			$richtextbox_AD_ContactsLeft.AppendText("Desccription: `n")
			
			$richtextbox_AD_ContactRight.Text = "$objectlist"
			
			$groups = $objecttype.memberof -replace ",OU=.*"
			$groups1 = $groups -replace "CN=" | Sort-Object | out-string
			$richtextbox_AD_ContactOther.Text = "Groups the contact is a member of: `n"
			$richtextbox_AD_ContactOther.AppendText("`n")
			$richtextbox_AD_ContactOther.AppendText($groups1)
			
		}
		
		#-----------------------------------------
		# User accounts
		#-----------------------------------------
		elseif ($objecttype.objectclass -eq "user")
		{
			$picturebox_ADUser.Image = $objecttype.thumbnailPhoto
			$toolstrip_textbox_User_AD.Text = $objecttype.samaccountname
			
			#----------------------------------------------------------
			# extensionatribute12: Shared mailbox or Conference Room
			#----------------------------------------------------------
			if (($objecttype.extensionAttribute12 -eq "MBX=ST;TYPE=SHARED;") -or ($objecttype.extensionAttribute12 -eq "MBX=ST; SHAREDMBX;"))
			{
				$tabcontrol_AD.SelectedTab = $tabpage_AD_Special
				
				$formatmanager = @{ Label = ''; Expression = { $(Get-ADUser $_.manager).samaccountname } }
				
				$userinfodisplay = $objecttype | Format-List $formatupn, $samaccountname, $formatmanager, $district, $formatemail, $siteid, $UserOU | Out-String
				$richtextbox_AD_SpecialLeft.Text = "This is a shared mailbox `n"
				$richtextbox_AD_SpecialLeft.appendText("`n")
				$richtextbox_AD_SpecialLeft.appendText("Display Name:`n")
				$richtextbox_AD_SpecialLeft.appendText("sAMAccountName:`n")
				$richtextbox_AD_SpecialLeft.appendText("Owner of Mailbox:`n")
				$richtextbox_AD_SpecialLeft.appendText("District:`n")
				$richtextbox_AD_SpecialLeft.appendText("Email:`n")
				$richtextbox_AD_SpecialLeft.appendText("Site ID:`n")
				$richtextbox_AD_SpecialLeft.appendText("OU:`n")
				
				$richtextbox_AD_SpecialRight.visible = $true
				$richtextbox_AD_SpecialRight.Text = $userinfodisplay
				
			}
			elseif (($objecttype.extensionAttribute12 -like "*RESMBX=roomrba;") -or ($objecttype.extensionAttribute12 -like "*TYPE=RESOURCE*"))
			{
				$tabcontrol_AD.SelectedTab = $tabpage_AD_Users
				
				#$datagridview_ADObjectSearch.Visible = $false
				$splitcontainer_AD_User.Visible = $true
				$richtextbox_AD_UsersLeft.Visible = $true
				$richtextbox_AD_UsersLeft.Clear()
				$richtextbox_AD_UsersRight.Visible = $true
				$richtextbox_AD_UsersRight.Clear()
				$richtextbox_AD_UsersGroups.Visible = $true
				$richtextbox_AD_UsersGroups.Clear()
				$richtextbox_Email_ADUser.Clear()
				
				$formatmanager = @{ Label = ''; Expression = { $(Get-ADUser $_.manager).samaccountname } }
				
				$userinfodisplay = $objecttype | Format-List $formatupn, $samaccountname, $formatmanager, $district, $formatemail, $siteid, $UserOU | Out-String
				$richtextbox_AD_UsersLeft.Text = "This is a Conference Room `n"
				$richtextbox_AD_UsersLeft.appendText("`n")
				$richtextbox_AD_UsersLeft.appendText("Display Name:`n")
				$richtextbox_AD_UsersLeft.appendText("sAMAccountName:`n")
				$richtextbox_AD_UsersLeft.appendText("Owner of Mailbox:`n")
				$richtextbox_AD_UsersLeft.appendText("District:`n")
				$richtextbox_AD_UsersLeft.appendText("Email:`n")
				$richtextbox_AD_UsersLeft.appendText("Site ID:`n")
				$richtextbox_AD_UsersLeft.appendText("OU:`n")
				
				$richtextbox_AD_UsersRight.Text = $userinfodisplay
				
			}
			
			#-----------------------------------------
			# It is a user account
			#-----------------------------------------
			else
			{
				#$datagridview_ADObjectSearch.Visible = $false
				$splitcontainer_AD_User.Visible = $true
				$richtextbox_AD_UsersLeft.Visible = $true
				$richtextbox_AD_UsersLeft.Clear()
				$richtextbox_AD_UsersRight.Visible = $true
				$richtextbox_AD_UsersRight.Clear()
				$richtextbox_AD_UsersGroups.Visible = $true
				$richtextbox_AD_UsersGroups.Clear()
				$groupbox_AD_AdvancedSearch.Visible = $false
				
				
				$objecttype = Get-ADUser $objecttype -properties *
				#-----------------------------------------
				# looking up enabled status
				#-----------------------------------------
				$enabled1 = $objecttype.enabled
				if ($enabled1 -eq $true)
				{
					$richtextbox_AD_UserEnabled.ForeColor = 'Black'
					$richtextbox_AD_UserEnabled.Text = $enabled1
				}
				else
				{
					$richtextbox_AD_UserEnabled.ForeColor = 'Red'
					$richtextbox_AD_UserEnabled.Text = $enabled1
				}
				
				#-----------------------------------------
				# looking up expiration date
				#-----------------------------------------
				#$accountexpires = @{ Label = ''; Expression = { $objecttype.AccountExpirationDate } }
				if ($objecttype.AccountExpirationDate -lt $(Get-Date))
				{
						$richtextbox_AD_UserExpired.ForeColor = 'Red'
						$richtextbox_AD_UserExpired.Text = $objecttype.AccountExpirationDate
				}
				else
				{
						$richtextbox_AD_UserExpired.ForeColor = 'Black'
						$richtextbox_AD_UserExpired.Text = $objecttype.AccountExpirationDate
				}
					
				#-----------------------------------------
				# check if manager is enabled, if not, look up next level
				#-----------------------------------------
				$managerenabled = Get-ADUser $objecttype.manager -Properties enabled, title
				
				if ($managerenabled.enabled -eq $false)
				{
					$managersmanager = Get-ADUser $managerenabled -Properties title
					$managersmanager = $managersmanager.samaccountname
					$managersmanagertitle = $managersmanager.title
					$formatmanager = @{ Label = ''; Expression = { "Manager disabled. Next Level: $managersmanager" } }
					$formatmanagertitle = @{ Label = ''; Expression = { "$managersmanagertitle" } }
				}
				else
				{
					$formatmanager = @{ Label = ''; Expression = { $managerenabled.sAMAccountName } }
					$formatmanagertitle = @{ Label = ''; Expression = { $managerenabled.title } }
				}
				
				#-----------------------------------------
				# formatting email alias's
				#-----------------------------------------
				$alias = @()
				
				foreach ($proxy in $objecttype.proxyaddresses)
				{
					if ($proxy -notlike "x500*" -and $proxy -notlike "*@mgd.kiewit.com" -and $proxy -notlike "x400*")
					{
						$alias += $proxy
					}
				}
				
				$richtextbox_AD_UsersLeft.Text = "This is a user acccount"
				$richtextbox_AD_UsersLeft.appendText(" `n")
				$richtextbox_AD_UsersLeft.appendText(" `n")
				$richtextbox_AD_UsersLeft.appendText("First name: `n")
				$richtextbox_AD_UsersLeft.appendText("Last Name: `n")
				$richtextbox_AD_UsersLeft.appendText("Display Name:`n")
				$richtextbox_AD_UsersLeft.appendText("UPN:`n")
				$richtextbox_AD_UsersLeft.appendText("sAMAccountName:`n")
				$richtextbox_AD_UsersLeft.appendText("Employee ID:`n")
				$richtextbox_AD_UsersLeft.appendText("Title:`n")
				$richtextbox_AD_UsersLeft.appendText("$divider `n")
				$richtextbox_AD_UsersLeft.appendText("Supervisor:`n")
				$richtextbox_AD_UsersLeft.appendText("Supervisor's Title:`n")
				$richtextbox_AD_UsersLeft.appendText("$divider `n")
				$richtextbox_AD_UsersLeft.appendText("District:`n")
				$richtextbox_AD_UsersLeft.appendText("Site ID:`n")
				$richtextbox_AD_UsersLeft.appendText("IP Phone:`n")
				$richtextbox_AD_UsersLeft.appendText("Cell number:`n")
				$richtextbox_AD_UsersLeft.appendText("$divider `n")
				$richtextbox_AD_UsersLeft.appendText("Lockout Time: `n")
				$richtextbox_AD_UsersLeft.appendText("Is the account Enabled:`n")
				$richtextbox_AD_UsersLeft.appendText("OU:`n")
				$richtextbox_AD_UsersLeft.appendText("Account expiration:`n")
				$richtextbox_AD_UsersLeft.appendText("Password last set: `n")
				$richtextbox_AD_UsersLeft.appendText("$divider `n")
				$richtextbox_AD_UsersLeft.appendText("Account created: `n")
				$richtextbox_AD_UsersLeft.appendText("Account last modified: `n")
				$richtextbox_AD_UsersLeft.appendText("$divider `n")
				$richtextbox_AD_UsersLeft.appendText("Messaging info:")
				
				$userinfodisplay = $($objecttype | Format-List $space, $space, $formatgivenname, $formatlastname, $formatupn, $formatupn1, $samaccountname, $employeeid, $Title, $blank, $formatmanager, $formatmanagertitle, $blank, $district, $siteid, $ipphone, $mobilephone, $blank, $lockout, $enabled, $UserOU, $accountexpires, $passwordlastset, $blank, $accountcreated, $accountudpated | Out-String).trim()
				
				$richtextbox_Email_ADUser.Text = ""
				$richtextbox_Email_ADUser.AppendText($objecttype.$sip)
				
				$i = 0
				foreach ($smtp in $alias)
				{
					$richtextbox_Email_ADUser.AppendText("`n")
					$richtextbox_Email_ADUser.AppendText($alias[$i])
					$i = $i + 1
				}
				
				$richtextbox_AD_UsersRight.Text = $userinfodisplay
				$groups = $objecttype.memberof -replace ",OU=.*"
				$groups1 = $groups -replace "CN=" | Sort-Object | out-string
				$richtextbox_AD_UsersGroups.Text = "Groups the user is a member of: `n"
				$richtextbox_AD_UsersGroups.AppendText("`n")
				$richtextbox_AD_UsersGroups.AppendText($groups1)
				
			}
		}
		
		#-----------------------------
		## writing to log file
		#-----------------------------
		$objecttypename = $objecttype.name
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Searching for AD Objects, Object searched for is $toolstrip_textbox_User_AD :: results found $objecttypename"
		
		Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Searching for AD Objects"
		
	}
	elseif ($tabcontrol_MS.SelectedTab -eq $tabpage_MS_Exchange)
	{
		$groupbox_Exch_SMTPEdit.Visible = $false
		$groupbox_Exch_Mailbox_output.Visible = $true
		$groupbox_Exch_ActiveSync.Visible = $false
		$groupbox_Exch_Delegation.Visible = $false
		$groupbox_AD_AdvancedSearch.Visible = $false
		$tabcontrol_Exchange.SelectedTab = $tabpage_Exch_Mailboxes
		$splitcontainer_Exch_Users.Visible = $true
		
		if ($objecttype -eq $null)
		{
			$richtextbox_Exch_UsersRight.clear()
			$richtextbox_Exch_UsersDelegation.clear()
			$richtextbox_Exch_SMTPInfo.clear()
			$richtextbox_Exch_UsersLeft.Text = "No results found. Please enter a valid PERNR or [partial] username, displayname, or email."
		}
		elseif ($objecttype.count -gt 1)
		{
			$tabcontrol_Exchange.SelectedTab = $tabpage_Exch_search
			
			$Exch_DT = ConvertTo-DataTable -InputObject $($objecttype | Select-Object ObjectClass, sAMAccountName, Name, Mail, EmployeeID, Title, company, physicalDeliveryOfficeName)
			$Exch_DT.Columns[6].ColumnName = "District"
			$Exch_DT.Columns[7].ColumnName = "Site ID"
			
			Load-DataGridView -DataGridView $datagridview_Exch_Search -Item $Exch_DT
		}

		$richtextbox_Exch_UsersLeft.Text = " `n"
		$richtextbox_Exch_UsersLeft.appendText(" `n")
		$richtextbox_Exch_UsersLeft.appendText("First name: `n")
		$richtextbox_Exch_UsersLeft.appendText("Last Name: `n")
		$richtextbox_Exch_UsersLeft.appendText("Display Name:`n")
		$richtextbox_Exch_UsersLeft.appendText("UPN:`n")
		$richtextbox_Exch_UsersLeft.AppendText("Hidden from GAL: `n")
		$richtextbox_Exch_UsersLeft.appendText("$divider `n")
		$richtextbox_Exch_UsersLeft.AppendText("Custom Attribute 1: `n")
		$richtextbox_Exch_UsersLeft.AppendText("Custom Attribute 11: `n")
		$richtextbox_Exch_UsersLeft.AppendText("Custom Attribute 12: `n")
		$richtextbox_Exch_UsersLeft.AppendText("$divider `n")
		$richtextbox_Exch_UsersLeft.AppendText("SIP address: `n")
		#$richtextbox_Exch_UsersLeft.AppendText("`n")
		$richtextbox_Exch_UsersLeft.AppendText("SMTP addresses: `n")
		
		if ($objecttype.msExchHideFromAddressLists -eq $null)
		{
			$formatGAL = @{ Label = ''; Expression = { "Not Set" } }
		}
		
		#-----------------------------
		# SMTP info
		#-----------------------------
		$alias = @()
		foreach ($proxy in $objecttype.proxyaddresses)
		{
			$alias += $proxy
		}
		
		$i = 0
		$richtextbox_Email_ExchUser.Clear()
		foreach ($smtp in $alias)
		{
			$richtextbox_Email_ExchUser.AppendText($alias[$i])
			$richtextbox_Email_ExchUser.AppendText("`n")
			$i = $i + 1
		}
		
		$richtextbox_Exch_UsersRight.Text = $($objecttype | Format-List $space, $space, $formatgivenname, $formatlastname, $formatupn, $formatupn1, $formatGAL, $blank, $formatCustomAttribute1, $formatCustomAttribute11, $formatCustomAttribute12, $blank, $formatSIP | Out-String).trim()
		
		#-----------------------------
		## writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Search for user info in Exchange"
		
		Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Search for user info in Exchange"
		
	}
	elseif ($tabcontrol_MS.SelectedTab -eq $tabpage_MS_O365)
	{
		
	}
	elseif ($tabcontrol_MS.SelectedTab -eq $tabpage_MS_Azure)
	{
		
	}
	elseif ($tabcontrol_MS.SelectedTab -eq $tabpage_MS_Sharepoint)
	{
		
	}

}


$buttonReenable_Click= {
	#TODO: Place custom script here
	
	$richtextbox_AD_UsersRight.Visible = $false
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	$textbox_AlternateOU_ADOther = $textbox_AlternateOU_ADOther -replace $replace
	$textbox_AlternateOU_ADOther = $textbox_AlternateOU_ADOther.trim()
	$richtextbox_AD_PC.Text = "Searching......"
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	if ($textbox_AlternateOU_ADOther -eq $null)
	{
		$OUPath = "OU=$textbox_AlternateOU_ADOther, OU=Workstations, OU=kiewit, DC=kiewitplaza, DC=com"
		$OUExists = [adsi]::Exists("LDAP://$OUPath")
		
		If ($OUExists = $true)
		{
			Set-ADComputer $toolstrip_textbox_User_AD -Enabled $true -Description " "
			$sleep
			Get-ADComputer $toolstrip_textbox_User_AD | Move-ADObject -targetpath "OU=$textbox_AlternateOU_ADOther,OU=Workstations,OU=Kiewit,DC=Kiewitplaza,DC=com"
			$SearchForPC = Get-ADComputer $toolstrip_textbox_User_AD -Properties description, canonicalname | Format-list Name, Enabled, description, canonicalname | Out-String
			if ($SearchForPC.enabled -eq $false)
			{
				$richtextbox_AD_PC.Text = $SearchForPC
			}
			else
			{
				$richtextbox_AD_PC.Text = "The Renabling of $toolstrip_textbox_User_AD failed. `n"
				$richtextbox_AD_PC.AppendText("$SearchForPC")
			}
		}
		else
		{
			$richtextbox_AD_PC.Text = "No OU found. Please check the OU name and try again."
		}
	}
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Re-enabling PC, $toolstrip_textbox_User_AD was the value entered :: results $SearchForPC"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Re-enabling PC"
	
}

$button_LoggedOnUser_ADOther_Click={
	#TODO: Place custom script here
	
	$loggedonuser = & "$installpath\bin\PsLoggedon.exe" \\$toolstrip_textbox_User_AD | Out-String
	
	if ($loggedonuser -ne $null)
	{
		$richtextbox_AD_PC.Text = "$loggedonuser"
		#$datagridview_ADOther.Visible = $true
		#Load-DataGridView -DataGridView $datagridview_ADOther -Item $loggedonuser
	}
	else
	{
		$richtextbox_AD_PC.Text = "PC was not found. Please confirm the name and that it is on the network. Also try using the IP address."
	}
	
	#-----------------------------
	# writing to logs
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Searching for logged on user to a PC, entered: $toolstrip_textbox_PCName1 :: logged on: $loggedonuser"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Searching for logged on user to a PC"
}


$button_SearchDistrictLetter_MappedDrives_Click = {
	#TODO: Place custom script here
	
	$datagridview_MapDrives.Visible = $false
	$richtextbox_MappedDrives.Visible = $true
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$richtextbox_MappedDrives.Text = "Searching..."
	
	$districtletter = Is-Numeric $textbox_District_MappedDrives.Text
	$driveletter = Is-Numeric $textbox_DriveLetterUser_MappedDrive.text
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	$datagridview_MapDrives.Visible = $true
	$richtextbox_MappedDrives.Visible = $false
	
	if ($districtletter -eq $false -and $driveletter -eq $false)
	{
		try
		{
			
			$datagridview_MapDrives.Visible = $true
			
			if ($textbox_District_MappedDrives.Text.Length -lt "1" -and $textbox_DriveLetterUser_MappedDrive.Text.Length -lt "1")
			{
				$Drives = Import-Csv "$lib\Drives.csv"
				$DriveDT = ConvertTo-DataTable -InputObject $Drives
				Load-DataGridView -DataGridView $datagridview_MapDrives -Item $DriveDT
			}
			elseif ($textbox_District_MappedDrives.Text.Length -eq "3" -and $textbox_DriveLetterUser_MappedDrive.Text.Length -lt "1")
			{
				$Drives = Import-Csv "$lib\Drives.csv" | Where-Object { $_.District -eq $textbox_District_MappedDrives.Text }
				$DriveDT = ConvertTo-DataTable -InputObject $Drives
				Load-DataGridView -DataGridView $datagridview_MapDrives -Item $DriveDT
			}
			elseif ($textbox_District_MappedDrives.Text.Length -ne "3" -and $textbox_DriveLetterUser_MappedDrive.Text.Length -eq "1")
			{
				$Drives = Import-Csv "$lib\Drives.csv" | Where-Object { $_.Letter -eq $textbox_DriveLetterUser_MappedDrive.Text }
				$DriveDT = ConvertTo-DataTable -InputObject $Drives
				Load-DataGridView -DataGridView $datagridview_MapDrives -Item $DriveDT
			}
			elseif ($textbox_District_MappedDrives.Text.Length -eq "3" -and $textbox_DriveLetterUser_MappedDrive.Text.Length -eq "1")
			{
				$Drives = Import-Csv "$lib\Drives.csv" | Where-Object { $_.Letter -eq $textbox_DriveLetterUser_MappedDrive.Text -and $_.District -eq $textbox_District_MappedDrives.Text }
				$DriveDT = ConvertTo-DataTable -InputObject $Drives
				Load-DataGridView -DataGridView $datagridview_MapDrives -Item $DriveDT
			}
		}
		catch
		{
			$richtextbox_MappedDrives.Visible = $true
			$datagridview_MapDrives.Visible = $false
			$richtextbox_MappedDrives.Text = "Please provide a valid value for District and/or the Drive letter."
		}
	}
	else
	{
		$richtextbox_MappedDrives.Visible = $true
		$datagridview_MapDrives.Visible = $false
		$richtextbox_MappedDrives.Text = "Please provide a non numeric value for District and/or the Drive letter."
	}
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Searched for shared drives in KSS tool, values entered :: Value entered: $textbox_District_MappedDrives $textbox_DriveLetterUser_MappedDrive"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Searched for shared drives in KSS tool"
}

$datagridview_MapDrives_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	#TODO: Place custom script here
	if ($datagridview_MapDrives.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridview_MapDrives.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}
		
		$datagridview_MapDrives.Sort($datagridview_MapDrives.Columns[$_.ColumnIndex], $direction)
	}
}

$button_GroupsUserIsIn_Click={
	#TODO: Place custom script here
	
	$richtextbox_AD_UsersGroups.Visible = $false
	$richtextbox_AD_UsersRight.visible = $false
	 
	#$groupbox_ADUser_ExtendExpiration.Visible = $false
	
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD.trim()
	$richtextbox_AD_UsersLeft.Visible = $true
	$richtextbox_AD_UsersRight.Visible = $false
	
	$groups = (Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD } | Get-ADPrincipalGroupMembership).name | Sort-Object | Out-String
	$richtextbox_AD_UsersLeft.Text = $groups
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Looking up Groups user is in, User searched: $toolstrip_textbox_User_AD :: results $groups"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Looking up Groups user is in,"
}

$toolstripbutton_PCInfo_AD_Click={
	#TODO: Place custom script here
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD.trim()
	$toolstrip_textbox_User_AD.Text = "Searching....."
	$sleep
	
	#-----------------------------
	# running search with cleaned up variables
	#-----------------------------
	$pcinfo = Get-ADcomputer $toolstrip_textbox_User_AD -Properties name, canonicalname, operatingsystem, description | Format-List name, canonicalname, operatingsystem, description | Out-String
	$lapsinfo = get-lapspassword $toolstrip_textbox_User_AD | Out-String
	$richtextbox_AD_PC.Text = "$pcinfo"
	$richtextbox_AD_PC.AppendText($lapsinfo)
	
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Getting info for a PC from AD, Device searched: $toolstrip_textbox_User_AD"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Getting info for a PC from AD"
}

$button_ValidateADAccountOldOwner_ChangeOwnerOfGroups_Click={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $true
	#$richtextbox_ADGroups_Right.Visible = $false
	#$richtextbox_ADGroups_GroupsMember.Visible = $false
	
	$splitcontainer_AD_Group.Visible = $false
	$splitcontainer_AD_Group.Panel1.Visible = $false
	$splitcontainer_AD_Group.Panel2.Visible = $false
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$textbox_OldOwner_ChangeOwnerADGroup = $textbox_OldOwner_ChangeOwnerADGroup -replace "System.Windows.Forms.TextBox, Text: "
	$textbox_OldOwner_ChangeOwnerADGroup = $textbox_OldOwner_ChangeOwnerADGroup.trim()
	$richtextbox_AD_GroupsOutput.Text = "Processing......"
	$sleep
	
	#-----------------------------
	# running script with new adjusted variables
	#-----------------------------
	
	$validateADUser = Get-ADUser $textbox_OldOwner_ChangeOwnerADGroup
	if ($validateADUser -ne $Null)
	{
		$richtextbox_AD_GroupsOutput.Text = $textbox_OldOwner_ChangeOwnerADGroup
		$richtextbox_AD_GroupsOutput.AppendText(" does exist.")
		
		#-----------------------------
		## writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Validate AD User script from Change Owner of AD groups tab, $textbox_OldOwner_ChangeOwnerADGroup does exist"
	}
	else
	{
		$richtextbox_AD_GroupsOutput.Text = ""
		$richtextbox_AD_GroupsOutput.AppendText("No account found. Please check spelling.")
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running Validate AD User script from Change Owner of AD groups tab, No account found :: $textManager2Lookup was the value entered"
	}
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Validating new owner account for Group ownership swap"
}

$toolstripbutton_GeneratePassword_ADUsers_Click={
	#TODO: Place custom script here
	Unlock-ADAccount test.ps -Verbose
	$Error.clear()
	
	#-----------------------------
	# generating new password
	#-----------------------------
	$i = 0

	do
	{
		Unlock-ADAccount test.ps -Verbose
		
		$special_characters = @('!', '@', '$', '#', '%', '&')
		$special_character = get-random $special_characters
		
		#-----------------------------
		# generating new password
		#-----------------------------
		$random1 = Get-Content $dictionary | Get-Random
		$newphrase = get-password $random1
		
		Write-Host "**************************************************"
		Write-Host $newphrase
		Write-Host "current count: " $i
		
		##get AD credentials and test if they are valid
		$username = "test.ps"
		
		try
		{
			Write-Host "**************************************************"
			Write-Host $newphrase
			Write-Host $(ConvertTo-SecureString -AsPlainText $newphrase -Force)
			Write-Host "**************************************************"
			get-aduser $username | Set-ADAccountPassword -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $newphrase -Force) -Verbose
		}
		catch
		{
			#write-host "failure!!"
			
			$richtextbox_AD_UsersLeft.Text = $error.exception.message
			$richtextbox_AD_UsersRight.Clear()
			$richtextbox_AD_UsersGroups.Clear()
			$richtextbox_Email_ADUser.Clear()
		}
		
		##function to be able to test AD credentials
		Add-Type -AssemblyName System.DirectoryServices.AccountManagement
		
		$ct = [System.DirectoryServices.AccountManagement.ContextType]::Domain
		$pc = New-Object System.DirectoryServices.AccountManagement.PrincipalContext($ct, $Domain_com)
		
		$Valid = @{
			IsValid    = $pc.ValidateCredentials($username, $newphrase).ToString()
		}
		$ValidTest = (New-Object PSObject -Property $Valid)
		$i = $i + 1
		
		Write-Host $ValidTest
		Write-Host $ValidTest.isvalid
		
		if ($ValidTest.isvalid -eq $true)
		{
			break
		}
		
		if ($i -gt "10")
		{
			break
		}
	}
	while (($ValidTest.isvalid -eq $false) -or ($i -lt "10"))
	
	
	#-----------------------------
	# displaying new password
	#-----------------------------
	if ($i -ge "10")
	{
		$richtextbox_AD_UsersRight.Clear()
		$richtextbox_Email_ADUser.Clear()
		$richtextbox_AD_UsersGroups.Clear()
		$richtextbox_AD_UsersLeft.Text = "Failed to generate password `n"
		$richtextbox_AD_UsersLeft.AppendText("10 attempts made`n")
		$richtextbox_AD_UsersLeft.AppendText("Please try again")
	}
	else
	{
		$toolstriptextbox_Password_ADUser.Text = $newphrase
	}
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Generating new password from dictionary for User"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Generating new password from dictionary for User"
}

$generatePassPhraseToolStripMenuItem_Click = {
	#TODO: Place custom script here
	
	do
	{
		#-----------------------------
		# generating new password
		#-----------------------------
		$random1 = Get-Content $adj | Get-Random
		$random1 = $random1.substring(0, 1).toupper() + $random1.substring(1).tolower()
		
		$random2 = Get-Content $noun | Get-Random
		$random2 = $random2.substring(0, 1).toupper() + $random2.substring(1).tolower()
		
		$random3 = Get-Content $adj | Get-Random
		$random3 = $random3.substring(0, 1).toupper() + $random3.substring(1).tolower()
		
		$random4 = Get-Content $adj | Get-Random
		$random4 = $random4.substring(0, 1).toupper() + $random4.substring(1).tolower()
		
		$passphrase_start = ($a = "The", "Is") | get-random
		
		if ($passphrase_start -eq "The")
		{
			$newPassword = $passphrase_start + $random1 + $random2 + "Is" + $random3
		}
		else
		{
			$newPassword = $passphrase_start + "The" + $random2 + "Very" + $random1
		}
		
		if ($newPassword.length -lt "16")
		{
			$random4 = Get-Content "\\Khonemdcnas01\kss_team\Apps\Powershell Tools\KSS MultiTool\lib\firstword.txt" | Get-Random
			$newPassword = $newPassword + "And" + $random4
		}
		
		$special_characters = @('!', '@', '$', '#', '%', '&')
		$special_character = get-random $special_characters
		
		$newPassword = $newPassword + $special_character
		
		##function to be able to test AD credentials
		Add-Type -AssemblyName System.DirectoryServices.AccountManagement
		
		$ct = [System.DirectoryServices.AccountManagement.ContextType]::Domain
		$pc = New-Object System.DirectoryServices.AccountManagement.PrincipalContext($ct, $domain)
		
		$Valid = @{
			IsValid   = $pc.ValidateCredentials($username, $newPassword).ToString()
		}
		$ValidTest = (New-Object PSObject -Property $Valid)
		
	}
	while ($ValidTest.isvalid.text -eq $false)
	
	#-----------------------------
	# displaying new password
	#-----------------------------
	$toolstriptextbox_Password_ADUser.Text = $newPassword
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Generating new password from dictionary for User"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Generating new password from dictionary for User"
}

$toolstripbutton_ApplyPassword_ADUser_Click={
	#TODO: Place custom script here
	$splitcontainer_AD_User.Visible = $false
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersGroups.Visible = $false
	$groupbox_AD_BulkPW.Visible = $false
	$richtextbox_AD_UsersLeft.Visible = $true
	$datagridview_AD_DirectReports.Visible = $false
	
	#-----------------------------
	# cleaning up and setting the variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace "System.Windows.Forms.ToolStrip, Name: toolstrip_ADUser, Items: 7"
	#$pwlastsetold = Get-ADUser -Identity $toolstrip_textbox_User_AD -Properties passwordlastset | Format-Table passwordlastset -HideTableHeaders | Out-String
	
	#-----------------------------
	# applying password to PDC
	#-----------------------------
	try
	{
		Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } | Set-ADAccountPassword -reset -NewPassword (ConvertTo-SecureString -AsPlainText $toolstriptextbox_Password_ADUser.Text -Force)
		#$pwlastsetnew = Get-ADUser -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD -or employeeid -like $toolstrip_textbox_User_AD } -Properties passwordlastset -ErrorVariable Passworderror | Format-Table passwordlastset -HideTableHeaders | Out-String	
		$richtextbox_AD_UsersLeft.Text = "Password updated successfuly `n"
	}
	catch
	{
		$richtextbox_AD_UsersLeft.Text = "Update failed. Please use ADUC to udpate. `n"
		$richtextbox_AD_UsersLeft.AppendText("$Error.Exception.Message `n")
	}
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Applying new password for User"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Applying new password for User"
}

$toolstripbutton_GeneratePasswordSpecial_ADUsers_Click={
	#TODO: Place custom script here
	
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersLeft.Clear()
	 
	$richtextbox_AD_UsersLeft.Clear()
	
	#-----------------------------
	# cleaning up the variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace "System.Windows.Forms.ToolStrip, Name: toolstrip_ADUser, Items: 7"
	$toolstrip_textbox_User_AD.trim()
	
	#-----------------------------
	# generating new password with given info, producing an 8 character password if any invalid info
	#-----------------------------
	do
	{
		$password = New-SWRandomPassword -PasswordLength 32 -InputStrings $specialyes
		
		$username = "test.ps"
		##function to be able to test AD credentials
		Add-Type -AssemblyName System.DirectoryServices.AccountManagement
		
		$ct = [System.DirectoryServices.AccountManagement.ContextType]::Domain
		$pc = New-Object System.DirectoryServices.AccountManagement.PrincipalContext($ct, $domain_com)
		
		$Valid = @{
			IsValid   = $pc.ValidateCredentials($username, $newphrase).ToString()
		}
		$ValidTest = (New-Object PSObject -Property $Valid)
	}
	while ($ValidTest.isvalid.text -eq $false)
	
	$toolstriptextbox_Password_ADUser.Text = $password

	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$(Get-Date).tostring("MM-dd-yyy") $(get-date -UFormat %R), $userName, $pcname, Generating new complex password for User"
	
	Log-Write -LogPath $logusagefile -LineVal "$(Get-Date).tostring("MM-dd-yyyy") $(get-date -UFormat %R), $userName, $pcname, Generating new complex password for User"
}

$datagridview_Printers_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	#TODO: Place custom script here
	if ($datagridview_MapDrives.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridview_MapDrives.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}
		
		$datagridview_MapDrives.Sort($datagridview_MapDrives.Columns[$_.ColumnIndex], $direction)
	}
}

$linklabel_IDMManagementTool_Links_CommonWebSites_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
	#TODO: Place custom script here
	Start-Process "https://kwt-imopl01.kiewit.com:50001/idm"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching IDM web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching IDM web interface"
	
}

$complexPasswordToolStripMenuItem_Click={
	#TODO: Place custom script here
	
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersLeft.Clear()
	
	#-----------------------------
	# generating new password 
	#-----------------------------
	do
	{
		$special_characters = @('!', '@', '$', '#', '%', '&')
		$special_character = get-random $special_characters
		
		#-----------------------------
		# generating new password
		#-----------------------------
		$random1 = Get-Content $dictionary | Get-Random
		$password = get-passphrase
		
		
		##get AD credentials and test if they are valid
		$domain = "kiewitplaza.com"
		$username = "test.ps"
		
		
		##function to be able to test AD credentials
		Add-Type -AssemblyName System.DirectoryServices.AccountManagement
		
		$ct = [System.DirectoryServices.AccountManagement.ContextType]::Domain
		$pc = New-Object System.DirectoryServices.AccountManagement.PrincipalContext($ct, $domain)
		
		$Valid = @{
			IsValid   = $pc.ValidateCredentials($username, $password).ToString()
		}
		$ValidTest = (New-Object PSObject -Property $Valid)
		
	}
	while ($ValidTest.isvalid.text -eq $false)
	
	$toolstriptextbox_Password_ADUser.Text = $password

	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Generating new Complex password for User under"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Generating new Complex password for User under"
}


$tabpage_Top_Finesse_Enter={
	#TODO: Place custom script here
	
	$webbrowser1 = New-Object 'System.Windows.Forms.WebBrowser'
	$webbrowser1.navigate("https://khonemdcucx01.kiewitplaza.com:8445/desktop/container/?locale=en_US")
}

$toolstrip_textbox_PCName_AD_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$toolstripbutton_PCInfo_AD.PerformClick()
	}
}


$textbox_District_MappedDrives_keydown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$button_SearchDistrictLetter_MappedDrives.PerformClick()
	}
}

$textbox_DriveLetterUser_MappedDrive_keydown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$button_SearchDistrictLetter_MappedDrives.PerformClick()
	}
}

$textbox_NTFSPermissions_keydown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$button_GetNTFSPermissions.PerformClick()
	}
}

$text_CustomScript_keydown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$button_RunCustomScript.PerformClick()
	}
}

$textbox_LogFileToReview_keydown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$button_ReviewInGUI.PerformClick()
	}
}

$textbox_WhichBugReport_BugReports_keydown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$button_ReviewInGUI_BugReports.PerformClick()
	}
}

$buttonReloadReadmeFile_Click={
	#TODO: Place custom script here
	
	$readme = (Get-Content $lib\readme.txt) -join "`n"
	
	$richtextbox_ReadMe.Text = $readme
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Updating Read Me file"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Updating Read Me file"
}

$button_CitrixDirector_Click={
	#TODO: Place custom script here
	
	Start-Process "http://khonesdc75ddc01/Director/LogOn.aspx?ReturnUrl=%2fdirector%2f"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Citrix Director"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Citrix Director"
}

$button_ExchangeManagement_Click={
	#TODO: Place custom script here
	
	Start-Process "https://mail.o365.kiewit.com/ecp/"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching exchange management web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching exchange management web interface"
}

$toolstripbutton1_Click={
	#TODO: Place custom script here
	
	#copy-item $lib\BulkGroupAdd.csv $fileoutput -force
	#invoke-item $fileoutput\BulkGroupAdd.csv
	
	$groupbox_ADGroups.Visible = $false
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$datagridview_ADGroupMember.Visible = $false
	$groupbox_ADGroups_MassChange.Visible = $true
}

$toolstripbutton_RemoveUserFromGroup_Click={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $true
	$splitcontainer_AD_Group.Visible = $false
	$splitcontainer_AD_Group.Panel1.Visible = $false
	$splitcontainer_AD_Group.Panel2.Visible = $false
	
	$fileoutputexists = Test-Path $fileoutput
	
	if ($fileoutputexists -eq $true)
	{
		#-----------------------------
		# cleaning up variables
		#-----------------------------
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
		$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
		
		
		Remove-Item $bulkADGroup -Force
		
		$name = "Name"
		$name | Out-File $bulkADGroup -Force
		$richtextbox_ADGroups_MassChange.Text | Out-File $bulkADGroup -Append -Force
		
		$users = import-csv $bulkADGroup
		
		$notingroup = New-Object System.Collections.ArrayList
		$removedfromgroup = New-Object System.Collections.ArrayList
		$userfail2remove = New-Object System.Collections.ArrayList
		#$userfail2remove = $users.user
		
		#-----------------------------
		# removing users
		#-----------------------------
		foreach ($user in $users.name)
		{
			
			try
			{
				if ((Get-ADUser $User -Properties memberof).memberof -like $toolstrip_textbox_User_AD)
				{
					$notingroup += $User
				}
				else
				{
					get-adgroup -identity $toolstrip_textbox_User_AD | Remove-ADGroupMember -members $User -Confirm:$false
					$removedfromgroup += $user
					#$userfail2remove.remove($user)
				}
			}
			catch
			{
				$userfail2remove += $user
			}
			
		}
		
		Remove-Item $bulkADGroup -Force
		
		$richtextbox_ADGroups_MassChange.Text = "Users removed: `n"
		$richtextbox_ADGroups_MassChange.AppendText("$removedfromgroup `n")
		$richtextbox_ADGroups_MassChange.AppendText(" `n")
		$richtextbox_ADGroups_MassChange.AppendText("Users not in group: `n")
		$richtextbox_ADGroups_MassChange.AppendText("$notingroup `n")
		$richtextbox_ADGroups_MassChange.AppendText(" `n")
		$richtextbox_ADGroups_MassChange.AppendText("failed to remove: `n")
		$richtextbox_ADGroups_MassChange.AppendText("$userfail2remove")
		
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Removing people from AD Group, Group name: $toolstrip_textbox_User_ADOthers :: Users: $users"
		
		Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Removing people from AD Group"
	}
	else
	{
		$richtextbox_AD_GroupsOutput.Text = "Please fill out the Excel form to have names to process."
	}
}

$toolstripbutton_AddUser2Group_Click={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $true
	$splitcontainer_AD_Group.Visible = $false
	$splitcontainer_AD_Group.Panel1.Visible = $false
	$splitcontainer_AD_Group.Panel2.Visible = $false
	
	#$richtextbox_ADGroups_Right.Visible = $false
	#$richtextbox_ADGroups_GroupsMember.Visible = $false
	$richtextbox_AD_GroupsOutput.Visible = $true
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	
	$richtextbox_AD_GroupsOutput.Text = "Processing... `n"
	
	$name = "Name"
	$name | Out-File $bulkADGroup -Force
	$richtextbox_ADGroups_MassChange.Text | Out-File $bulkADGroup -Append -Force
	
	$users = import-csv $bulkADGroup
	$alreadyingroup = New-Object System.Collections.ArrayList
	$addedtogroup = New-Object System.Collections.ArrayList
	$userfail2add = New-Object System.Collections.ArrayList
	
	#-----------------------------
	# adding users
	#-----------------------------
	foreach ($user in $users.name)
	{
		try
		{
			if ((Get-ADUser $user.trim() -Properties memberof).memberof -like $toolstrip_textbox_User_AD)
			{
				$alreadyingroup += $user
			}
			else
			{
				Add-ADGroupMember -identity $toolstrip_textbox_User_AD -members $user 
				$addedtogroup += $user
				
			}
		}
		catch
		{
			$userfail2add += $user
		}
		
	}
	
	Remove-Item $bulkADGroup -Force
	
	$addedtogrouplist = $addedtogroup | Format-List | Out-String
	$alreadyingrouplist = $alreadyingroup | Format-List | Out-String
	$userfail2addlist = $userfail2add | Format-List | Out-String
	
	$richtextbox_ADGroups_MassChange.Text = "Users added: `n"
	$richtextbox_ADGroups_MassChange.AppendText("$addedtogrouplist `n")
	$richtextbox_ADGroups_MassChange.AppendText(" `n")
	$richtextbox_ADGroups_MassChange.AppendText("Users already in group: `n")
	$richtextbox_ADGroups_MassChange.AppendText("$alreadyingrouplist `n")
	$richtextbox_ADGroups_MassChange.AppendText(" `n")
	$richtextbox_ADGroups_MassChange.AppendText("failed to add: `n")
	$richtextbox_ADGroups_MassChange.AppendText($userfail2addlist) 
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Adding people to AD Group, Group name: $toolstrip_textbox_User_ADOthers :: Users: $users"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Adding people to AD Group"
	
}

$buttonDutyListForTheDay_Click={
	#TODO: Place custom script here
	Start-Process "\\Khonemdcnas01\kss_team\Apps\Powershell Tools\Josh Dev stuff\GUI\Duty Sheet - KMT\KSS Duty List.exe"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launched Duty List"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launched Duty List"
}

$button_UserLastLogonAD_Click={
	#TODO: Place custom script here
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.replace(' ', '.')
	$sleep
	
	start-process "$installpath\bin\lastlogon.exe"
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Checking last log on of user via external app"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Checking last log on of user"
	
}

$textbox_NewGroup_Manager_Leave={
	#TODO: Place custom script here
	
	$textbox_NewGroup_Manager = $textbox_NewGroup_Manager -replace $replace
	$textbox_NewGroup_Manager = $textbox_NewGroup_Manager.trim()
	
	$NewGroupManager = Get-ADUser $textbox_NewGroup_Manager
	
	if ($NewGroupManager -eq $null ) {
		[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
		
		[Windows.Forms.MessageBox]::Show("That manager's name does not exist. Please check the name and try again.", "Manager name check", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
	}
	
}

$textbox_NewGroup_Email_Leave = {
	#TODO: Place custom script here
	
	#-----------------------------
	#  clean up variables
	#-----------------------------
	$textbox_NewGroup_Email = $textbox_NewGroup_Email -replace $replace
	$textbox_NewGroup_Email = $textbox_NewGroup_Email.trim()
	
	
	#-----------------------------
	#  check if email is in AD already
	#-----------------------------
	$a = Get-ADUser -filter { mail -like $textbox_NewGroup_Email }
	
	if ($a -ne $null) {
		[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
		
		[Windows.Forms.MessageBox]::Show("That email address exists in AD. Please enter an address that is not in use.", "Email format check", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
	}
	
	$a = Validate-Email $textbox_NewGroup_Email
	
	
	#-----------------------------
	#  validate email formatting
	#-----------------------------
	if ($a -eq $false -or $textbox_NewGroup_Email -notmatch ".com")
	{
		[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
		
		[Windows.Forms.MessageBox]::Show("That email address is not formatted properly.", "Email format check", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
	}
}

$textbox_NewGroup_District_Leave = {
	#TODO: Place custom script here
	
	$textbox_NewGroup_District = $textbox_NewGroup_District -replace $replace
	$textbox_NewGroup_District = $textbox_NewGroup_District.trim()
	
	if ($textbox_NewGroup_District.length -ne "3") {
		[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
		
		[Windows.Forms.MessageBox]::Show("That is not a 3 character District Code. Please re-enter.", "District 3 character code format check", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
	}
}

$buttonPing_Click={
	#TODO: Place custom script here
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD.trim()
	$richtextbox_AD_PC.Text = "Searching....."
	$sleep
	
	#-----------------------------
	# getting IP and Pinging
	#-----------------------------
	$ip = Get-ADComputer $toolstrip_textbox_User_AD -Properties ipv4Address | Select-Object ipv4Address
	$ip = $ip.ipv4Address
	$richtextbox_AD_PC.Text = "IP address of $toolstrip_textbox_User_AD :: $ip `n"
	$richtextbox_AD_PC.AppendText("`n")
	$ping = & ping $toolstrip_textbox_User_AD | Format-Table -AutoSize | out-string
	$richtextbox_AD_PC.AppendText("$ping")
	
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Pinging a PC, IP address of $toolstrip_textbox_User_AD :: $ip"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Pinging a PC"
}

$toolstripbuttonPCInfoComplete_Click={
	#TODO: Place custom script here
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_PCName_AD = $toolstrip_textbox_PCName_AD -replace $replace
	$toolstrip_textbox_PCName_AD.trim()
	$richtextbox_AD_PC.Text = "Searching....."
	$sleep
	
	#-----------------------------
	# running search with cleaned up variables
	#-----------------------------
	$boottime = Get-WmiObject -ClassName win32_operatingsystem -computer $toolstrip_textbox_PCName_AD | select lastbootuptime
	$lastbootuptime = [Management.ManagementDateTimeConverter]::ToDateTime($boottime.LastBootUpTime)
	
	$LBTime = [Management.ManagementDateTimeConverter]::ToDateTime($boottime.LastBootUpTime)
	[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
	$label_UptimeStatus = "$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
	
	$cpuinfo = Get-Processor $toolstrip_textbox_PCName_AD | Format-List| Out-String
	
	#-----------------------------
	# displaying results
	#-----------------------------
	$richtextbox_AD_PC.Text = "Last Boot Time: $lastbootuptime `n"
	$richtextbox_AD_PC.AppendText("Uptime: $label_UptimeStatus `n")
	$richtextbox_AD_PC.AppendText("`n")
	$richtextbox_AD_PC.AppendText("`n")
	$richtextbox_AD_PC.AppendText("`n")
	$richtextbox_AD_PC.AppendText("CPU Info:")
	$richtextbox_AD_PC.AppendText("$cpuinfo `n")
	
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Looking up info about a PC from network resources, Last Boot Time: $lastbootuptime :: Uptime: $label_UptimeStatus :: $cpuinfo"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Looking up info about a PC from network resources"
}

$button_RecoverADObject_Click={
	#TODO: Place custom script here
	
	Start-Process "http://scorchdev/"
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching web interface for recovering deleted PC from AD"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching web interface for recovering deleted PC from AD"
	
}

$buttonLaunchDHCPAndDNS_Click={
	#TODO: Place custom script here
	
	Start-Process "C:\WINDOWS\system32\dhcpmgmt.msc"
	Start-Process "C:\Windows\System32\dnsmgmt.msc"
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching DHCP and DNS consoles"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching DHCP and DNS consoles"
}

$buttonPowershellISE_Click={
	#TODO: Place custom script here
	
	Start-Process "C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell_ise.exe"
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Powershell ISE"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Powershell ISE"
}

$buttonLaunchLazyWinAdmin_Click={
	#TODO: Place custom script here
	Start-Process "\\khonemdcnas01\kss_team\Apps\Powershell Tools\Josh Dev stuff\GUI\LazyWinAdmin\LazyWinAdmin.exe"

	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching LazyWinAdmin"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching LazyWinAdmin"
}

$toolstrip_textbox_User_AD_KeyDown = [System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$toolstripbutton_GetInfo_ADUser.PerformClick()
	}
}

$toolstripbutton_Clear_ADobjectSearchBox_Click={
	#TODO: Place custom script here
	
	$toolstrip_textbox_User_AD.Clear()
	 
	$richtextbox_AD_UsersLeft.Clear()
	$richtextbox_AD_UsersRight.Clear()
	$richtextbox_AD_UsersGroups.clear()
	
}

$tabpage_Groups_Enter={
	#TODO: Place custom script here
	 
	$richtextbox_AD_UsersLeft.Clear()
}

$textbox_ADUser_Logon_SAMAccountNameOfUser_TextChanged={
	#TODO: Place custom script here
	$button_ADUser_Logon_Apply.Visible = $true
}

$textbox_ADUser_UPNofUser_TextChanged={
	#TODO: Place custom script here
	$button_ADUser_Logon_Apply.Visible = $true
}

$textbox_ADUser_StreetAddress_TextChanged={
	#TODO: Place custom script here
	
	$button_ADUserUpdate_Apply.Visible = $true
}

$textbox_ADUser_City_TextChanged={
	#TODO: Place custom script here
	
	$button_ADUserUpdate_Apply.Visible = $true
}

$textbox_ADUser_ZipCode_TextChanged={
	#TODO: Place custom script here
	
	$button_ADUserUpdate_Apply.Visible = $true
}

$combobox_ADUser_State_TextChanged={
	#TODO: Place custom script here
	
	$button_ADUserUpdate_Apply.Visible = $true
}

$radiobutton_ExtendFor60Days_CheckedChanged={
	#TODO: Place custom script here
	
	$button_ExtendExpiration_Apply.Visible = $true
}

$radiobutton_ExtendFor6Months_CheckedChanged={
	#TODO: Place custom script here
	
	$button_ExtendExpiration_Apply.Visible = $true
}

$radiobutton_ExtendFor1Year_CheckedChanged={
	#TODO: Place custom script here
	
	$button_ExtendExpiration_Apply.Visible = $true
}

$datagridview_ADObjectSearch_CellMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	#TODO: Place custom script here
	
	$toolstrip_textbox_User_AD.Text = $datagridview_ADObjectSearch.SelectedCells[0].FormattedValue
	
	$toolstripbutton_GetInfo_ADUser.PerformClick()
}

$textbox1_TextChanged={
	#TODO: Place custom script here
	$button_ADUser_AddUserToGroup_Add.Visible = $true
	$button_ADUser_AddUserToGroup_Remove.Visible = $true
}

$button_FSRefresh_Click={
	#TODO: Place custom script here
	
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD -replace $replace
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.trim()
	$toolstrip_textbox_User_AD = $toolstrip_textbox_User_AD.replace(' ', '.')
	
	#-----------------------------
	# running with cleaned up variables
	#-----------------------------
	if (($toolstrip_textbox_User_AD -gt "0") -and ($toolstrip_textbox_User_AD -lt "999999") -and ($PERNR -eq $true))
	{
		$objecttype = Get-ADUser -filter { employeeid -like $toolstrip_textbox_User_AD -and name -notlike "*admin" } -Properties extensionAttribute12, CanonicalName, objectclass, givenname, sn, displayname, title, manager, employeeID, company, mail, ipphone, mobile, physicalDeliveryOfficeName, lockoutTime, enabled, accountExpirationdate, directreports, whenCreated, whenChanged, memberof, samaccountname, manager, passwordlastset, accountExpirationdate, enabled, proxyaddresses, msRTCSIP-PrimaryUserAddress
	}
	else
	{
		$objecttype = Get-ADobject -filter { samaccountname -like $toolstrip_textbox_User_AD -or displayname -like $toolstrip_textbox_User_AD -or mail -like $toolstrip_textbox_User_AD } -Properties extensionAttribute12, CanonicalName, objectclass, givenname, sn, displayname, title, manager, employeeID, company, mail, ipphone, mobile, physicalDeliveryOfficeName, lockoutTime, directreports, whenCreated, whenChanged, memberof, samaccountname, manager, managedby, description, proxyaddresses, msRTCSIP-PrimaryUserAddress
		#$formatting = $true
	}
	
	$groups = $objecttype.memberof -replace ",OU=.*"
	$groups1 = $groups -replace "CN=" | Sort-Object | out-string
	$richtextbox_ADUser_AddUserToGroup_MemberOf.Text = "Groups the user is a member of: `n"
	$richtextbox_ADUser_AddUserToGroup_MemberOf.AppendText("`n")
	$richtextbox_ADUser_AddUserToGroup_MemberOf.AppendText($groups1)
	
	$richtextbox_ADUser_AddUserToGroup_Output.Text = "Group membership list updated"
	
}

$textbox_ADUser_Description_TextChanged={
	#TODO: Place custom script here
	$button_ADUser_UpdateNotesDescription.Visible = $true
}

$textbox_ADUser_Notes_TextChanged={
	#TODO: Place custom script here
	$button_ADUser_UpdateNotesDescription.Visible = $true
}

$button_ADUser_UpdateNotesDescription_Click={
	#TODO: Place custom script here
	
	Set-ADUser $textbox_ADUser_Description_ADObject.text -Replace @{ info = $textbox_ADUser_Notes.text ; description = $textbox_ADUser_Description.text }
	
	$diditwork = get-aduser $textbox_ADUser_Description_ADObject.text -Properties description, info
	$richtextbox_ADUser_Description_Output.Text = "Updated to: `n"
	$richtextbox_ADUser_Description_Output.AppendText("Description: `n")
	$richtextbox_ADUser_Description_Output.AppendText($diditwork.description)
	$richtextbox_ADUser_Description_Output.AppendText(" `n")
	$richtextbox_ADUser_Description_Output.AppendText(" `n")
	$richtextbox_ADUser_Description_Output.AppendText("Notes: `n")
	$richtextbox_ADUser_Description_Output.AppendText($diditwork.info)
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Updating Notes and Description on AD user, User $textbox_ADUser_Description_ADObject"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Updating Notes and Description on AD user"
}

$toolstripbutton5_Click={
	#TODO: Place custom script here
	#-----------------------------
	# cleaning up variables
	#-----------------------------
	$toolstrip_textbox_PCName_AD = $toolstrip_textbox_PCName_AD -replace $replace
	$toolstrip_textbox_PCName_AD.trim()
	$richtextbox_AD_PC.Text = "Resetting and then looking up new password............."
	$sleep
	
	#-----------------------------
	# running search with cleaned up variables
	#-----------------------------
	reset-AdmPwdPassword $toolstrip_textbox_PCName_AD –WhenEffective $datetime.adddays(30)
	sleep -s 10
	$lapsinfo = get-lapspassword $toolstrip_textbox_PCName_AD | Out-String
	$richtextbox_AD_PC.Text = $lapsinfo
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Resetting LAPS Info, PC entered is $toolstrip_textbox_PCName_AD"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Resetting LAPS Info"
}

$button_TransferApp2PC_Click={
	#TODO: Place custom script here
	$folder = Get-ChildItem "\\khonemdcnas01\KSS_Team\Zipped_Installers\" -Recurse -filter $combobox_TransferApp2PC.SelectedItem | Select-Object Directory
	
	$ctemp = "\\" + $toolstrip_textbox_User_AD.Text + "\c$\temp\"
	$tempexists = test-path $ctemp
	
	if ($tempexists -eq $true)
	{
		$output = "robocopy '" + $folder.directory + "\' \\" + $ctemp + "\" + $combobox_TransferApp2PC.SelectedItem + " /V"
		$output | Out-File $customscript
		Start-Process "powershell.exe" $customscript
	}
	else
	{
		$wshell = New-Object -ComObject Wscript.Shell
		
		$wshell.Popup("C:\Temp does not exist, please create on user's PC.", 0, "Done", 0x1)
	}
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$toolstrip_textbox_User_ADText = $toolstrip_textbox_User_AD.Text
	$combobox_TransferApp2PCSelectedItem = $combobox_TransferApp2PC.SelectedItem
	
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Copying $combobox_TransferApp2PCSelectedItem to $toolstrip_textbox_User_ADText\c\Temp\"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Copying app to C:\Temp on user's PC"
}

$aDAdminCenterToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process "C:\Windows\system32\dsac.exe" -WorkingDirectory "C:\Windows\system32\"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching AD Administrative center"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching AD Administrative center"
}

$aDUsersComputersToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "C:\Windows\system32\dsa.msc" -WorkingDirectory "C:\Windows\system32"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching ADUC"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching ADUC"
}

$commandLineToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process "c:\windows\system32\cmd.exe"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching CLI"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching CLI"
}

$dHCPToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process "C:\WINDOWS\system32\dhcpmgmt.msc" -WorkingDirectory "C:\WINDOWS\system32\"
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Launching DHCP console"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching DHCP console"
}

$dNSToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "C:\Windows\System32\dnsmgmt.msc"
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Launching DNS console"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching DHCP console"
}

$lockoutStatusToolToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process "C:\Program Files (x86)\Windows Resource Kits\Tools\lockoutstatus.exe" -WorkingDirectory "C:\Program Files (x86)\Windows Resource Kits\Tools\"
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Lockout status tool"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Lockout status tool"
}

$powershellToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process powershell
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching powershell"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching powershell"
}

$powershellISEToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process "C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell_ise.exe" 
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Powershell ISE"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Powershell ISE"
}

$rDPToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process c:\windows\system32\mstsc.exe -WorkingDirectory "C:\Windows\system32"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Remote desktop utility"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Remote desktop utility"
}

$propertiesToolStripMenuItem_Click={
	#TODO: Place custom script here
	if ($datagridview_ADObjectSearch.SelectedCells[0].FormattedValue -eq "user")
	{
		#$param = "user"
	}
	elseif ($datagridview_ADObjectSearch.SelectedCells[0].FormattedValue -eq "group")
	{
		#$param = "group"
	}
	elseif ($datagridview_ADObjectSearch.SelectedCells[0].FormattedValue -eq "contact")
	{
		#$param = "contact"
	}
	elseif ($datagridview_ADObjectSearch.SelectedCells[0].FormattedValue -eq $null -or $datagridview_ADObjectSearch.SelectedCells[0].FormattedValue -eq "")
	{
		
	}
	else
	{
		$param = $datagridview_ADObjectSearch.SelectedCells[0].FormattedValue
		Show-Edit_ADuser_psf $param
	}
}

$documentLibraryToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://portal.kiewit.com/sites/imclientengag/CESD/team/CollaborationDocuments/Forms/AllItems.aspx"
	
	$IE = new-object -com internetexplorer.application
	$IE.navigate2("https://portal.kiewit.com/sites/imclientengag/CESD/team/CollaborationDocuments/Forms/AllItems.aspx")
	$IE.visible = $true
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching KSS Collaboration Documents"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching KSS Collaboration Documents"
}

$oTCalendarToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://portal.kiewit.com/sites/imclientengag/CESD/team/Lists/KSS%20OT%20Calendar/calendar.aspx"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching KSS OT Calendar"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching KSS OT Calendar"
}

$pTOCalendarToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://portal.kiewit.com/sites/imclientengag/CESD/team/Lists/PTO%20Calendar/calendar.aspx"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching KSS PTO Calendar"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching KSS PTO Calendar"
}

$accountRequestGuideToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://portal.kiewit.com/sites/imsecurity/End%20User%20Access%20and%20Security%20Guides/KieCore/Requesting%20a%20New%20AD%20Account%20Guide.pdf"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching account request guide PDF"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching account request guide PDF"
}

$accountMatrixToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://portal.kiewit.com/sites/imsecurity/team/_layouts/15/WopiFrame.aspx?sourcedoc={51408f91-81a3-47a3-8b24-d19584a80e26}&action=default&DefaultItemOpen=1"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Account Matrix"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Account Matrix"
}

$iDMToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://kwt-imopl01.kiewit.com:50001/idm"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching IDM web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching IDM web interface"
}

$v0VsV1DistrictsAllItemsToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://portal.kiewit.com/sites/kci/Lists/V0%20vs%20V1%20Districts/AllItems.aspx"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching V0 vs V1 KB inSNOW"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching V0 vs V1 KB inSNOW"
}

$directorToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://khonesdc75ddc01/Director/LogOn.aspx?ReturnUrl=%2fdirector%2f"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Citrix Director"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Citrix Director"
}

$xenMobileToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://kiewit.xm.citrix.com:4443/kiewit/login_xdm_uc.jsp;jsessionid=257393610335F58CD21F5E407F0B5312"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Xenmobile"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Xenmobile"
}

$ciscoVMToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://10.252.22.21/cuadmin/home.do"
	
	#-----------------------------
	# writing to log files
	#----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Cisco voicemail interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Cisco voicemail interface"
}

$cyberARKToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://cyberark.kiewit.com/"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Cyberark"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Cyberark"
}

$hostedExchangeAdminToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://mail.o365.kiewit.com/ecp"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching exchange management web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching exchange management web interface"
}

$o365ExchangeAdminToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://email.kiewit.com/ecp"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching o365 exchange management web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching 0365 exchange management web interface"
}

$cylanceToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://login.cylance.com/Login"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Cylance management web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Cylance management web interface"
}

$eFaxToolStripMenuItem_Click={
	#TODO: Place custom script here
	
	Invoke-Expression "c:\Temp\efax.ps1"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching eFax admin console log in"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching eFax admin console log in"
}

$finesseToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://khonemdcucx01.kiewitplaza.com:8445/desktop/container/?locale=en_US"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Finesse web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Finesse web interface"
}

$kieDriveToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://lr.kiewitplaza.com/dashboard"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Finesse web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Finesse web interface"
}

$printerLogicToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://printers.kiewitplaza.com/admin/"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching PrinterLogic web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching PrinterLogic web interface"
}

$clearpassToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://clearpass.kiewit.com/tips/tipsLogin.action"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Clearpass web interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Clearpass web interface"
}

$aLMToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://almkiewit1152.saas.hp.com/qcbin/"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching ALM website"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching ALM website"
}

$bitlockerToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://azrmbawwp001.kiewitplaza.com/HelpDesk/"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Bitlocker interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Bitlocker interface"
}

$mSDSOnlineToolStripMenuItem_Click={
	#TODO: Place custom script here
	$url = "https://www.msdsonline.com/"
	
	$ie = new-Object -com internetexplorer.application;
	$ie.visible = $true;
	$ie.navigate($url)
	
	while ($ie.Busy -eq $true)
	{
		start-sleep -milliseconds 1000;
	}
	
	$username = "KSS.Admin"
	$password = "Kiewit123Admin"
	
	
	$ie.Document.getElementById("LoginButton").Click()
	$ie.Document.getElementById("LoginUsername").value = $username
	$ie.Document.getElementByID("LoginPassword").value = $password
	$ie.Document.getElementById("SubmitLogin").Click()
	
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching MSDS online"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching MSDS online"
}

$sCCMLocatePCByUsernameToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://sccmreports/Reports/Pages/Report.aspx?ItemPath=%2fReportServer%2fUsers%2f__Computers+per+User"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching SCCM locate PC by username report"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching SCCM locate PC by username report"
}

$sCCMReportsToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://sccmreports"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching SCCM main report page"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching SCCM main report page"
}

$scorchDevToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://scorchdev"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching ScorDev website"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching ScorDev website"
}

$virusTotalToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "http://www.virustotal.com"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching virustotal website"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching virustotal website"
}

$powersourceWebsiteToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process iexplore.exe "http://kpehome.kiewitplaza.com/dashboard/home.kpe"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching powersource website"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching powersource website"
}

$newUserEmailToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "\\Khonemdcnas01\kss_team\Apps\Powershell Tools\KSS MultiTool\bin\Powersource Access - user's name.oft"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching email template for new user in Powersource"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching email template for new user in Powersource"
}

$covepointJonadamEmailToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "\\Khonemdcnas01\kss_team\Apps\Powershell Tools\KSS MultiTool\bin\Covepoint PS Users.oft"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching covepoint powersource template email"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching covepoint powersource template email"
}

$covepointNewUserEmailToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "\\Khonemdcnas01\kss_team\Apps\Powershell Tools\KSS MultiTool\bin\Powersource.oft"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching covepoint new user powersource template email"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching covepoint new user powersource template email"
}

$toolstripbutton_MS_Click={
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_MS
}

$toolstripbutton_Saas_Click={
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_SaaS
}

$toolstripbutton_MappedDrives_Click={
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_MappedDrives
}

$toolstripbutton_NTFS_Click={
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_NTFSPermissions
}

$toolstripbutton_CustomScript_Click={
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_CustomScript
}

$toolstripbutton_Settings_Click={
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_Settings
}

$button_PERNRSwapFunction_Click={
	#TODO: Place custom script here
	$groupbox_ADuser_Output.Visible = $false
	$groupbox_PERNRSwap.Visible = $true
	$button_PERNR_Swap.Visible = $false
	$groupbox_AD_BulkPW.Visible = $false
	$richtextbox_AD_UsersLeft.Visible = $true
	$datagridview_AD_DirectReports.Visible = $false
	$groupbox_AD_AdvancedSearch.Visible = $false
	
	$textbox_OldADAccount.Text = $toolstrip_textbox_User_AD.text
	$toolstrip_textbox_User_ADtext = $toolstrip_textbox_User_AD.text -replace ".{2}$"
	$richtextbox_PERNR_Output.Clear()

	$newADUserObject = $(Get-ADUser -LDAPFilter:"(anr=$toolstrip_textbox_User_ADtext)").samaccountname
	
	Load-ComboBox $combobox_PERNR $newADUserObject
}

$button_PERNR_Swap_Click={
	#TODO: Place custom script here
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Have you confirmed you have the correct accounts to swap?", "Status", 4)
	if ($OUTPUT -eq "YES")
	{
		#-----------------------------
		# getting all info from user accounts and applying to variables
		#-----------------------------
		$date = Get-Date -uFormat "%m/%d/%Y"
		
		$oldaccount = Get-ADUser -Identity $textbox_OldADAccount.Text -Properties employeeID, description, info
		$newaccount = Get-ADUser -Identity $combobox_PERNR.Text -Properties employeeID, description, info
		
		$oldPERNR = $oldaccount.employeeid
		$olddescription = $date + " converted to FTE by " + $username + " V1 Staff Employee updated PERNR"
		$oldinfo = $oldaccount.info
		$oldinfoupdate = $oldaccount.description + "     " + $oldinfo
		
		$newpernr = $newaccount.employeeid
		$newdescription = $date + " disabld by " + $username + " - Using user's original account: " + $textbox_OldADAccount
		$newinfo = $newaccount.info
		$newinfoupdate = $newaccount.description + "     " + $newinfo
		
		#-----------------------------
		# swapping PERNR, moving description to notes, updating description
		#-----------------------------
		get-aduser -Identity $oldaccount | set-aduser -replace @{ employeeid = $newpernr; info = $oldinfoupdate; description = $olddescription }  | Move-ADObject -TargetPath "OU=Recon,OU=Users,OU=Kiewit,DC=Kiewitplaza,DC=com" | Clear-ADAccountExpiration
		get-ADUser -Identity $newaccount | set-aduser -replace @{ employeeid = $oldpernr; info = $newinfoupdate; description = $newdescription }  | Disable-ADAccount 
		
		#-----------------------------
		# checking results
		#-----------------------------
		$oldaccountcheck = Get-ADUser $oldaccount -Properties info, employeeID, description, expirationtime
		$newaccountcheck = Get-ADUser $newaccount -Properties info, employeeID, description
		
		$oldPERNR1 = $oldaccountcheck.employeeID
		$olddescription1 = $oldaccountcheck.description
		$oldinfo1 = $oldaccountcheck.info
		$oldexpiration = $oldaccountcheck.expirationtime
		$newpernr1 = $newaccountcheck.employeeID
		$newdescription1 = $newaccountcheck.description
		$newinfo1 = $newaccountcheck.info
		
		$richtextbox_PERNR_Output.AppendText("$textbox_OldADAccount `n")
		$richtextbox_PERNR_Output.AppendText("PERNR : $oldPERNR1 `n")
		$richtextbox_PERNR_Output.AppendText("Description : $olddescription1 `n")
		$richtextbox_PERNR_Output.AppendText("Notes : $oldinfo1 `n")
		$richtextbox_PERNR_Output.appendtext("Confirm removal of expiration date: $oldexpiration `n")
		$richtextbox_PERNR_Output.AppendText("`n")
		$richtextbox_PERNR_Output.AppendText("$textbox_NewADAccount `n")
		$richtextbox_PERNR_Output.AppendText("PERNR : $newpernr1 `n")
		$richtextbox_PERNR_Output.AppendText("Description : $newdescription1 `n")
		$richtextbox_PERNR_Output.AppendText("Notes : $newinfo1 `n")
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Running PERNR swap, $textbox_OldADAccount was the old account :: $textbox_NewADAccount was the new account"
		
		Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Running PERNR swap"
		
		$textbox_PernerSWAP_TicketNumber_text = $textbox_PernerSWAP_TicketNumber.text
		log-write -logpath $logfile_ticket -linevalue "$date, $time, $userName, ticket: $textbox_PernerSWAP_TicketNumber_text, Running PERNR swap, old account: $textbox_OldADAccount  new account: $textbox_NewADAccount"
	}
}

$buttonEnableAndMoveToRecon_Click= {
	#TODO: Place custom script here
	#$splitcontainer_AD_User.Visible = $true
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersGroups.Visible = $false
	$richtextbox_Email_ADUser.Clear()
	$groupbox_PERNRSwap.Visible = $false
	$groupbox_AD_BulkPW.Visible = $false
	$richtextbox_AD_UsersLeft.Visible = $true
	$datagridview_AD_DirectReports.Visible = $false
	$groupbox_AD_AdvancedSearch.Visible = $false

	$SNOW_Ticket = Read-Host "What is the ticket number in SNOW for this request:"
	if ($SNOW_Ticket -ne $null)
	{
		
		$get_ADuser = Get-ADUser $toolstrip_textbox_User_AD.Text -properties *
		Enable-ADAccount -identity $get_ADuser
		Get-ADUser $get_ADuser | Move-ADObject -TargetPath "OU=Recon,OU=Users,OU=Kiewit,DC=Kiewitplaza,DC=Com"
		
		$expiredate = [datetime]::fromfiletime($AD_user.accountexpires).toshortdatestring()
		if ($expiredate -eq $null)
		{
			$expiredate = "No Expiration date"
		}
		
		$newdescription = (get-date).ToShortDateString() + " Re-enabled by " + $env:username + " - " + $SNOW_Ticket + " - expiration date: " + $expiredate
		$newinfo = $description.description + $description.info
		Get-ADUser $get_ADuser | Set-ADUser -description $newdescription
		Get-ADUser $get_ADuser | Set-ADUser -Replace @{ Info = $newinfo }
		
		$toolstripbutton_GetInfo_ADUser.PerformClick()
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$toolstrip_textbox_User_ADText = $toolstrip_textbox_User_AD.Text
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Enabling and moving to AD user Recon OU: $toolstrip_textbox_User_ADText"

	}
	else
	{
		$splitcontainer_AD_User.Visible = $false
		$richtextbox_AD_UsersLeft.Text = "No ticket provided. `n"
		
		#-----------------------------
		# writing to log file
		#-----------------------------
		$toolstrip_textbox_User_ADText = $toolstrip_textbox_User_AD.Text
		$date = $(Get-Date).tostring("MM-dd-yyyy")
		$time = $(get-date -UFormat %R)
		Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, No ticket provided for enabling and moving user to recon: $toolstrip_textbox_User_ADText"
	}

	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Enabling and moving Ad user to Recon OU"
	
}

$button_UpdateNTFSPermissions_Click={
	#TODO: Place custom script here
	if ($textbox_NTFS_ADGroupApproval.Text -contains "None" -or $textbox_NTFS_ADGroupApproval.Text -contains "Notify")
	{
		$ADgroup = $datagridview_NTFS_AcessList.SelectedCells[0].FormattedValue
		Show-NTFS_Permissions_psf $ADgroup
	}
	else
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Have you received documented approval in the ticket yet?", "Status", 4)
		if ($OUTPUT -eq "YES")
		{
			$ADgroup = $datagridview_NTFS_AcessList.SelectedCells[0].FormattedValue
			Show-NTFS_Permissions_psf $ADgroup
		}
		else
		{	
			$richtextbox_NTFS_OwnerInfoError.Text = "This requires approval first."
		}
	}
}

$pCManagementToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process '& compmgmt.msc'
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Launching Computer Management console"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Computer Management console"
}

$button_Duties_Refresh_Click={
	#TODO: Place custom script here
	#-----------------------------
	## define duties info
	#-----------------------------
	$objExcel = New-Object -ComObject Excel.Application
	$objExcel.Visible = $false
	
	#$WorkBook = $objExcel.Workbooks.Open($importedvariables.Workbook.Workbook)
	$WorkBook = $objExcel.Workbooks.Open($onedriveLocal)
	
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## What is the tab you want to look up on the Ticket watch sheet?
	#---------------------------------------------------------------------------------------------------------------------------------
	$WorkSheet = $WorkBook.sheets.item($ImportedVariables.worksheet.worksheet)
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## duty info
	#---------------------------------------------------------------------------------------------------------------------------------
	$richtextbox_Chat1.Text = $WorkSheet.Columns.Item($importedvariables.Chat1.Column).Rows.Item($ImportedVariables.Chat1.Row).Text
	$richtextbox_Chat2.Text = $WorkSheet.Columns.Item($importedvariables.Chat2.Column).Rows.Item($ImportedVariables.Chat2.Row).Text
	$richtextbox_Chat3.Text = $WorkSheet.Columns.Item($importedvariables.Chat3.Column).Rows.Item($ImportedVariables.Chat3.Row).Text
	$richtextbox_Chat4.Text = $WorkSheet.Columns.Item($importedvariables.Chat4.Column).Rows.Item($ImportedVariables.Chat4.Row).Text
	$richtextbox_Chat5.Text = $WorkSheet.Columns.Item($importedvariables.Chat5.Column).Rows.Item($ImportedVariables.Chat5.Row).Text
	$richtextbox_Chat6.Text = $WorkSheet.Columns.Item($importedvariables.Chat6.Column).Rows.Item($ImportedVariables.Chat6.Row).Text
	$richtextbox_Chat7.Text = $WorkSheet.Columns.Item($importedvariables.Chat7.Column).Rows.Item($ImportedVariables.Chat7.Row).Text
	$richtextbox_ChatPhone.Text = $WorkSheet.Columns.Item($importedvariables.Chat_Phone.Column).Rows.Item($ImportedVariables.Chat_Phone.Row).Text
	
	$richtextbox_Lunch1.Text = $WorkSheet.Columns.Item($importedvariables.Chat1.Lunch).Rows.Item($ImportedVariables.Chat1.Row).Text
	$richtextbox_Lunch2.Text = $WorkSheet.Columns.Item($importedvariables.Chat2.Lunch).Rows.Item($ImportedVariables.Chat2.Row).Text
	$richtextbox_Lunch3.Text = $WorkSheet.Columns.Item($importedvariables.Chat3.Lunch).Rows.Item($ImportedVariables.Chat3.Row).Text
	$richtextbox_Lunch4.Text = $WorkSheet.Columns.Item($importedvariables.Chat4.Lunch).Rows.Item($ImportedVariables.Chat4.Row).Text
	$richtextbox_Lunch5.Text = $WorkSheet.Columns.Item($importedvariables.Chat5.Lunch).Rows.Item($ImportedVariables.Chat5.Row).Text
	$richtextbox_Lunch6.Text = $WorkSheet.Columns.Item($importedvariables.Chat6.Lunch).Rows.Item($ImportedVariables.Chat6.Row).Text
	$richtextbox_Lunch7.Text = $WorkSheet.Columns.Item($importedvariables.Chat7.Lunch).Rows.Item($ImportedVariables.Chat7.Row).Text
	
	$richtextbox_AccessChats.Text = $WorkSheet.Columns.Item($importedvariables.AccessChats.Column).Rows.Item($ImportedVariables.AccessChats.Row).Text
	
	$richtextbox_Routing1.Text = $WorkSheet.Columns.Item($importedvariables.Routing.Column).Rows.Item($ImportedVariables.Routing.Row).Text
	$richtextbox_TWBackup.Text = $WorkSheet.Columns.Item($importedvariables.RoutingBackup.Column).Rows.Item($ImportedVariables.RoutingBackup.Row).Text
	
	$richtextbox_Phone1.Text = $WorkSheet.Columns.Item($importedvariables.Phone1.Column).Rows.Item($ImportedVariables.Phone1.Row).Text
	$richtextbox_Phone2.Text = $WorkSheet.Columns.Item($importedvariables.Phone2.Column).Rows.Item($ImportedVariables.Phone2.Row).Text
	$richtextbox_Phone3.Text = $WorkSheet.Columns.Item($importedvariables.Phone3.Column).Rows.Item($ImportedVariables.Phone3.Row).Text
	$richtextbox_Phone4.Text = $WorkSheet.Columns.Item($importedvariables.Phone4.Column).Rows.Item($ImportedVariables.Phone4.Row).Text
	$richtextbox_Phone5.Text = $WorkSheet.Columns.Item($importedvariables.Phone5.Column).Rows.Item($ImportedVariables.Phone5.Row).Text
	$richtextbox_Phone6.Text = $WorkSheet.Columns.Item($importedvariables.Phone6.Column).Rows.Item($ImportedVariables.Phone6.Row).Text
	$richtextbox_Phone7.Text = $WorkSheet.Columns.Item($importedvariables.Phone7.Column).Rows.Item($ImportedVariables.Phone7.Row).Text
	$richtextbox_Phone8.Text = $WorkSheet.Columns.Item($importedvariables.Phone8.Column).Rows.Item($ImportedVariables.Phone8.Row).Text
	$richtextbox_Phone9.Text = $WorkSheet.Columns.Item($importedvariables.Phone9.Column).Rows.Item($ImportedVariables.Phone9.Row).Text
	$richtextbox_Phone10.Text = $WorkSheet.Columns.Item($importedvariables.Phone10.Column).Rows.Item($ImportedVariables.Phone10.Row).Text
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## KSS Contact info
	#---------------------------------------------------------------------------------------------------------------------------------	
	$richtextbox_KSSContact1.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSContact1.Column).Rows.Item($ImportedVariables.KSSContact1.Row).Text
	$richtextbox_KSSContact2.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSContact2.Column).Rows.Item($ImportedVariables.KSSContact2.Row).Text
	$richtextbox_KSSContact3.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSContact3.Column).Rows.Item($ImportedVariables.KSSContact3.Row).Text
	$richtextbox_KSSContact4.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSContact4.Column).Rows.Item($ImportedVariables.KSSContact4.Row).Text
	$richtextbox_KSSContact5.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSContact5.Column).Rows.Item($ImportedVariables.KSSContact5.Row).Text
	
	$richtextbox_KSSNum1.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSNum1.Column).Rows.Item($ImportedVariables.KSSNum1.Row).Text
	$richtextbox_KSSNum2.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSNum2.Column).Rows.Item($ImportedVariables.KSSNum2.Row).Text
	$richtextbox_KSSNum3.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSNum3.Column).Rows.Item($ImportedVariables.KSSNum3.Row).Text
	$richtextbox_KSSNum4.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSNum4.Column).Rows.Item($ImportedVariables.KSSNum4.Row).Text
	$richtextbox_KSSNum5.Text = $WorkSheet.Columns.Item($ImportedVariables.KSSNum5.Column).Rows.Item($ImportedVariables.KSSNum5.Row).Text
	
	$objExcel.DisplayAlerts = $False
	$objExcel.Quit()
	Stop-Process -name excel.exe
	
	#$MainForm.Refresh()
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Refresh of Daily Duties"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Refresh of Daily Duties"
}

$buttonChangeCustom_Click={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $true
	$groupbox_ADGroups.Visible = $false
	
}

$fiveCubitsToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "https://secure.fivecubits.com/login"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching FiveCubits website"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching FiveCubits website"
	
}

$button_RefreshKSSContacts_Click={
	#TODO: Place custom script here
	#-----------------------------
	## define duties info
	#-----------------------------
	$objExcel = New-Object -ComObject Excel.Application
	$objExcel.Visible = $false
	
	#$WorkBook = $objExcel.Workbooks.Open($importedvariables.Workbook.Workbook)
	$WorkBook = $objExcel.Workbooks.Open($onedriveLocal)
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## What is the tab you want to look up on the Ticket watch sheet for KSS Contacts
	#---------------------------------------------------------------------------------------------------------------------------------
	$WorkSheet = $WorkBook.sheets.item($importedvariables_KSSContacts.worksheet.worksheet)
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## KSS Contact info
	#---------------------------------------------------------------------------------------------------------------------------------	
	$richtextbox_KSSContact1.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact1.Column).Rows.Item($importedvariables_KSSContacts.KSSContact1.Row).Text
	$richtextbox_KSSContact2.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact2.Column).Rows.Item($importedvariables_KSSContacts.KSSContact2.Row).Text
	$richtextbox_KSSContact3.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact3.Column).Rows.Item($importedvariables_KSSContacts.KSSContact3.Row).Text
	$richtextbox_KSSContact4.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact4.Column).Rows.Item($importedvariables_KSSContacts.KSSContact4.Row).Text
	$richtextbox_KSSContact5.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact5.Column).Rows.Item($importedvariables_KSSContacts.KSSContact5.Row).Text
	$richtextbox_KSSContact6.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact6.Column).Rows.Item($importedvariables_KSSContacts.KSSContact6.Row).Text
	
	$richtextbox_KSSNum1.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum1.Column).Rows.Item($importedvariables_KSSContacts.KSSNum1.Row).Text
	$richtextbox_KSSNum2.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum2.Column).Rows.Item($importedvariables_KSSContacts.KSSNum2.Row).Text
	$richtextbox_KSSNum3.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum3.Column).Rows.Item($importedvariables_KSSContacts.KSSNum3.Row).Text
	$richtextbox_KSSNum4.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum4.Column).Rows.Item($importedvariables_KSSContacts.KSSNum4.Row).Text
	$richtextbox_KSSNum5.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum5.Column).Rows.Item($importedvariables_KSSContacts.KSSNum5.Row).Text
	$richtextbox_KSSNum6.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum6.Column).Rows.Item($importedvariables_KSSContacts.KSSNum6.Row).Text
	
	$objExcel.DisplayAlerts = $False
	$objExcel.Quit()
	Stop-Process -name excel.exe
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Refreshing KSS Contacts from source"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Refreshing KSS Contacts from source"
}

$button_FSDuty_Refresh_Click={
	#TODO: Place custom script here
	
	$objExcel = New-Object -ComObject Excel.Application
	$objExcel.Visible = $false
	
	#$WorkBook = $objExcel.Workbooks.Open($importedvariables.Workbook.Workbook)
	$WorkBook = $objExcel.Workbooks.Open($onedriveLocal)
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## What is the tab you want to look up on the Ticket watch sheet for Field Services info
	#---------------------------------------------------------------------------------------------------------------------------------
	$WorkSheet = $WorkBook.sheets.item($importedvariables_FS.worksheet.worksheet)
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## KSS Contact info
	#---------------------------------------------------------------------------------------------------------------------------------	
	$richtextbox_FS_Phones1.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone1.Column).Rows.Item($importedvariables_FS.Phone1.Row).Text
	$richtextbox_FS_Phones2.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone2.Column).Rows.Item($importedvariables_FS.Phone2.Row).Text
	$richtextbox_FS_Phones3.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone3.Column).Rows.Item($importedvariables_FS.Phone3.Row).Text
	$richtextbox_FS_Phones4.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone4.Column).Rows.Item($importedvariables_FS.Phone4.Row).Text
	$richtextbox_FS_Phones5.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone5.Column).Rows.Item($importedvariables_FS.Phone5.Row).Text
	$richtextbox_FS_Phones6.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone6.Column).Rows.Item($importedvariables_FS.Phone6.Row).Text
	$richtextbox_FS_Phones7.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone7.Column).Rows.Item($importedvariables_FS.Phone7.Row).Text
	$richtextbox_FS_Phones8.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone8.Column).Rows.Item($importedvariables_FS.Phone8.Row).Text
	$richtextbox_FS_Phones9.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone9.Column).Rows.Item($importedvariables_FS.Phone9.Row).Text
	$richtextbox_FS_Phones10.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone10.Column).Rows.Item($importedvariables_FS.Phone10.Row).Text
	$richtextbox_FS_Phones11.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone11.Column).Rows.Item($importedvariables_FS.Phone11.Row).Text
	$richtextbox_FS_Phones12.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone12.Column).Rows.Item($importedvariables_FS.Phone12.Row).Text
	$richtextbox_FS_Phones13.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone13.Column).Rows.Item($importedvariables_FS.Phone13.Row).Text
	$richtextbox_FS_Phones14.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone14.Column).Rows.Item($importedvariables_FS.Phone14.Row).Text
	$richtextbox_FS_Phones15.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone15.Column).Rows.Item($importedvariables_FS.Phone15.Row).Text
	$richtextbox_FS_Phones16.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone16.Column).Rows.Item($importedvariables_FS.Phone16.Row).Text
	$richtextbox_FS_Phones17.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone17.Column).Rows.Item($importedvariables_FS.Phone17.Row).Text
	$richtextbox_FS_Phones18.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone18.Column).Rows.Item($importedvariables_FS.Phone18.Row).Text
	$richtextbox_FS_Phones19.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone19.Column).Rows.Item($importedvariables_FS.Phone19.Row).Text
	$richtextbox_FS_Phones20.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone20.Column).Rows.Item($importedvariables_FS.Phone20.Row).Text
	$richtextbox_FS_Phones21.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone21.Column).Rows.Item($importedvariables_FS.Phone21.Row).Text
	$richtextbox_FS_Phones22.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone22.Column).Rows.Item($importedvariables_FS.Phone22.Row).Text
	$richtextbox_FS_Phones23.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone23.Column).Rows.Item($importedvariables_FS.Phone23.Row).Text
	$richtextbox_FS_Phones24.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone24.Column).Rows.Item($importedvariables_FS.Phone24.Row).Text
	$richtextbox_FS_Phones25.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone25.Column).Rows.Item($importedvariables_FS.Phone25.Row).Text
	
	$richtextbox_FS_PhStart1.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone1.StartColumn).Rows.Item($importedvariables_FS.Phone1.Row).Text
	$richtextbox_FS_PhStart2.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone2.StartColumn).Rows.Item($importedvariables_FS.Phone2.Row).Text
	$richtextbox_FS_PhStart3.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone3.StartColumn).Rows.Item($importedvariables_FS.Phone3.Row).Text
	$richtextbox_FS_PhStart4.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone4.StartColumn).Rows.Item($importedvariables_FS.Phone4.Row).Text
	$richtextbox_FS_PhStart5.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone5.StartColumn).Rows.Item($importedvariables_FS.Phone5.Row).Text
	$richtextbox_FS_PhStart6.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone6.StartColumn).Rows.Item($importedvariables_FS.Phone6.Row).Text
	$richtextbox_FS_PhStart7.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone7.StartColumn).Rows.Item($importedvariables_FS.Phone7.Row).Text
	$richtextbox_FS_PhStart8.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone8.StartColumn).Rows.Item($importedvariables_FS.Phone8.Row).Text
	$richtextbox_FS_PhStart9.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone9.StartColumn).Rows.Item($importedvariables_FS.Phone9.Row).Text
	$richtextbox_FS_PhStart10.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone10.StartColumn).Rows.Item($importedvariables_FS.Phone10.Row).Text
	$richtextbox_FS_PhStart11.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone11.StartColumn).Rows.Item($importedvariables_FS.Phone11.Row).Text
	$richtextbox_FS_PhStart12.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone12.StartColumn).Rows.Item($importedvariables_FS.Phone12.Row).Text
	$richtextbox_FS_PhStart13.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone13.StartColumn).Rows.Item($importedvariables_FS.Phone13.Row).Text
	$richtextbox_FS_PhStart14.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone14.StartColumn).Rows.Item($importedvariables_FS.Phone14.Row).Text
	$richtextbox_FS_PhStart15.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone15.StartColumn).Rows.Item($importedvariables_FS.Phone15.Row).Text
	$richtextbox_FS_PhStart16.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone16.StartColumn).Rows.Item($importedvariables_FS.Phone16.Row).Text
	$richtextbox_FS_PhStart17.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone17.StartColumn).Rows.Item($importedvariables_FS.Phone17.Row).Text
	$richtextbox_FS_PhStart18.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone18.StartColumn).Rows.Item($importedvariables_FS.Phone18.Row).Text
	$richtextbox_FS_PhStart19.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone19.StartColumn).Rows.Item($importedvariables_FS.Phone19.Row).Text
	$richtextbox_FS_PhStart20.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone20.StartColumn).Rows.Item($importedvariables_FS.Phone20.Row).Text
	$richtextbox_FS_PhStart21.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone21.StartColumn).Rows.Item($importedvariables_FS.Phone21.Row).Text
	$richtextbox_FS_PhStart22.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone22.StartColumn).Rows.Item($importedvariables_FS.Phone22.Row).Text
	$richtextbox_FS_PhStart23.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone23.StartColumn).Rows.Item($importedvariables_FS.Phone23.Row).Text
	$richtextbox_FS_PhStart24.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone24.StartColumn).Rows.Item($importedvariables_FS.Phone24.Row).Text
	$richtextbox_FS_PhStart25.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone25.StartColumn).Rows.Item($importedvariables_FS.Phone25.Row).Text
	
	$richtextbox_FS_PhEnd1.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone1.EndColumn).Rows.Item($importedvariables_FS.Phone1.Row).Text
	$richtextbox_FS_PhEnd2.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone2.EndColumn).Rows.Item($importedvariables_FS.Phone2.Row).Text
	$richtextbox_FS_PhEnd3.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone3.EndColumn).Rows.Item($importedvariables_FS.Phone3.Row).Text
	$richtextbox_FS_PhEnd4.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone4.EndColumn).Rows.Item($importedvariables_FS.Phone4.Row).Text
	$richtextbox_FS_PhEnd5.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone5.EndColumn).Rows.Item($importedvariables_FS.Phone5.Row).Text
	$richtextbox_FS_PhEnd6.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone6.EndColumn).Rows.Item($importedvariables_FS.Phone6.Row).Text
	$richtextbox_FS_PhEnd7.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone7.EndColumn).Rows.Item($importedvariables_FS.Phone7.Row).Text
	$richtextbox_FS_PhEnd8.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone8.EndColumn).Rows.Item($importedvariables_FS.Phone8.Row).Text
	$richtextbox_FS_PhEnd9.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone9.EndColumn).Rows.Item($importedvariables_FS.Phone9.Row).Text
	$richtextbox_FS_PhEnd10.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone10.EndColumn).Rows.Item($importedvariables_FS.Phone10.Row).Text
	$richtextbox_FS_PhEnd11.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone11.EndColumn).Rows.Item($importedvariables_FS.Phone11.Row).Text
	$richtextbox_FS_PhEnd12.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone12.EndColumn).Rows.Item($importedvariables_FS.Phone12.Row).Text
	$richtextbox_FS_PhEnd13.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone13.EndColumn).Rows.Item($importedvariables_FS.Phone13.Row).Text
	$richtextbox_FS_PhEnd14.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone14.EndColumn).Rows.Item($importedvariables_FS.Phone14.Row).Text
	$richtextbox_FS_PhEnd15.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone15.EndColumn).Rows.Item($importedvariables_FS.Phone15.Row).Text
	$richtextbox_FS_PhEnd16.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone16.EndColumn).Rows.Item($importedvariables_FS.Phone16.Row).Text
	$richtextbox_FS_PhEnd17.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone17.EndColumn).Rows.Item($importedvariables_FS.Phone17.Row).Text
	$richtextbox_FS_PhEnd18.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone18.EndColumn).Rows.Item($importedvariables_FS.Phone18.Row).Text
	$richtextbox_FS_PhEnd19.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone19.EndColumn).Rows.Item($importedvariables_FS.Phone19.Row).Text
	$richtextbox_FS_PhEnd20.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone20.EndColumn).Rows.Item($importedvariables_FS.Phone20.Row).Text
	$richtextbox_FS_PhEnd21.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone21.EndColumn).Rows.Item($importedvariables_FS.Phone21.Row).Text
	$richtextbox_FS_PhEnd22.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone22.EndColumn).Rows.Item($importedvariables_FS.Phone22.Row).Text
	$richtextbox_FS_PhEnd23.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone23.EndColumn).Rows.Item($importedvariables_FS.Phone23.Row).Text
	$richtextbox_FS_PhEnd24.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone24.EndColumn).Rows.Item($importedvariables_FS.Phone24.Row).Text
	$richtextbox_FS_PhEnd25.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone25.EndColumn).Rows.Item($importedvariables_FS.Phone25.Row).Text
	
	$textbox_DellSupport1.Text = $WorkSheet.Columns.Item($importedvariables_FS.DellSupport1.Column).Rows.Item($importedvariables_FS.DellSupport1.Row).Text
	$textbox_DellSupport2.Text = $WorkSheet.Columns.Item($importedvariables_FS.DellSupport2.Column).Rows.Item($importedvariables_FS.DellSupport2.Row).Text
	$textbox_DellSupport3.Text = $WorkSheet.Columns.Item($importedvariables_FS.DellSupport3.Column).Rows.Item($importedvariables_FS.DellSupport3.Row).Text
	
	$textbox_FSChats1.Text = $WorkSheet.Columns.Item($importedvariables_FS.Chats1.Column).Rows.Item($importedvariables_FS.Chats1.Row).Text
	$textbox_FSChats2.Text = $WorkSheet.Columns.Item($importedvariables_FS.Chats2.Column).Rows.Item($importedvariables_FS.Chats2.Row).Text
	$textbox_FSChats3.Text = $WorkSheet.Columns.Item($importedvariables_FS.Chats3.Column).Rows.Item($importedvariables_FS.Chats3.Row).Text
	
	$textbox_FS_PTO1.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO1.Column).Rows.Item($importedvariables_FS.PTO1.Row).Text
	$textbox_FS_PTO2.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO2.Column).Rows.Item($importedvariables_FS.PTO2.Row).Text
	$textbox_FS_PTO3.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO3.Column).Rows.Item($importedvariables_FS.PTO3.Row).Text
	$textbox_FS_PTO4.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO4.Column).Rows.Item($importedvariables_FS.PTO4.Row).Text
	$textbox_FS_PTO5.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO5.Column).Rows.Item($importedvariables_FS.PTO5.Row).Text
	$textbox_FS_PTO6.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO6.Column).Rows.Item($importedvariables_FS.PTO6.Row).Text
	$textbox_FS_PTO7.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO7.Column).Rows.Item($importedvariables_FS.PTO7.Row).Text
	$textbox_FS_PTO8.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO8.Column).Rows.Item($importedvariables_FS.PTO8.Row).Text
	$textbox_FS_PTO9.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO9.Column).Rows.Item($importedvariables_FS.PTO9.Row).Text
	$textbox_FS_PTO10.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO10.Column).Rows.Item($importedvariables_FS.PTO10.Row).Text
	
	$objExcel.DisplayAlerts = $False
	$objExcel.Quit()
	Stop-Process -name excel.exe
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Refreshing FS Daily Duties"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, REfreshing FS Daily Duties"
}

$button_FS_Edit_Click={
	#TODO: Place custom script here
	Show-FS_DutySettings_psf
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Opening FS Duty management interface"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Opening FS Duty management interface"
}

$mFACheckToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process $installpath\bin\MFA_Check.exe
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching MFA Check app"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching MFA Check app"
}

$toolstripcombobox1_TextChanged={
	#TODO: Place custom script here
	Start-Process $zeroday_share\$($toolstripcombobox1.Text)
}

$button_ApplyDC_Click={
	#TODO: Place custom script here
	$global:primaryDC = $combobox_DCs.Text
	$textbox_ApplyDC.Text = "Primary DC = $global:primaryDC"
}

$buttonKSSContacts_Click={
	#TODO: Place custom script here
	Show-ContactsSettings_psf
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Opening Contact info location to display items properly"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Opening Contact info location to display items properly"
}

$button_DutiesEdit_Click={
	#TODO: Place custom script here
	Show-DutySettings_psf
}

$button_PW_SettingsApply_Click={
	#TODO: Place custom script here
	#$Chat1 = @{ "Column" = $Chat_Colum1.Text; "Row" = $Chat_Row1.text; "Lunch" = $Chat_ColumnLunch1.Text }
	
	$history = @{ "Length" = $textbox_PW_HistoryLength.Text }
	$Age = @{ "Maximum" = $textbox_PW_AgeMax.Text; "Minimum" = $textbox_PW_AgeMin.Text }
	$MinChar = @{ "Length" = $textbox_PW_MinCharLength.Text; "PassPhrase" = $textbox_PW_PassphraseLength.Text }
	$Complexity = @{ "Capital" = $textbox_PW_Capital.Text; "Lower" = $textbox_PW_LowerCase.Text; "Number" = $textbox_PW_Number.Text; "Special" = $textbox_PW_Special.Text }
	
	$inicontent = @{ "History" = $history; "Age" = $Age; "MinChar" = $MinChar; "Complexity" = $Complexity }
	Out-IniFile -FilePath $passwordini -InputObject $inicontent -Force
	
	$textbox_PW_Output.Text = "Please restart to take effect"
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Update AD PW policies"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Update AD PW policies"
}

$tabpage_Settings_Leave={
	#TODO: Place custom script here
	
	$textbox_PW_Output.Clear()
	$textbox_ApplyDC.Clear()
}

$tabpage_Settings_ReadMe_Enter={
	#TODO: Place custom script here
	$readme = (Get-Content $lib\readme.txt) -join "`n"
	
	$richtextbox_ReadMe.Text = $readme
	
}

$buttonRefreshList_Click={
	#TODO: Place custom script here
	$grouplist = Get-ChildItem "\\khonemdcnas01\KSS_Team\Zipped_Installers" -Recurse -Filter "*.zip" | Select-Object FullName, Name
	Load-ComboBox $combobox_TransferApp2PC $grouplist.name
}

$tabpage_Top_Settings_Enter={
	#TODO: Place custom script here
	
	if ($global:duty -eq 0)
	{
	
		#-----------------------------
		## define duties info
		#-----------------------------
		$objExcel = New-Object -ComObject Excel.Application
		$objExcel.Visible = $false
		
		#$WorkBook = $objExcel.Workbooks.Open($importedvariables.Workbook.Workbook)
		$WorkBook = $objExcel.Workbooks.Open($onedriveLocal)
		
		
		#---------------------------------------------------------------------------------------------------------------------------------
		## What is the tab you want to look up on the Ticket watch sheet for servide desk info
		#---------------------------------------------------------------------------------------------------------------------------------
		$WorkSheet = $WorkBook.sheets.item($ImportedVariables.worksheet.worksheet)
		
		#---------------------------------------------------------------------------------------------------------------------------------
		## duty info
		#---------------------------------------------------------------------------------------------------------------------------------
		$richtextbox_Chat1.Text = $WorkSheet.Columns.Item($importedvariables.Chat1.Column).Rows.Item($ImportedVariables.Chat1.Row).Text
		$richtextbox_Chat2.Text = $WorkSheet.Columns.Item($importedvariables.Chat2.Column).Rows.Item($ImportedVariables.Chat2.Row).Text
		$richtextbox_Chat3.Text = $WorkSheet.Columns.Item($importedvariables.Chat3.Column).Rows.Item($ImportedVariables.Chat3.Row).Text
		$richtextbox_Chat4.Text = $WorkSheet.Columns.Item($importedvariables.Chat4.Column).Rows.Item($ImportedVariables.Chat4.Row).Text
		$richtextbox_Chat5.Text = $WorkSheet.Columns.Item($importedvariables.Chat5.Column).Rows.Item($ImportedVariables.Chat5.Row).Text
		$richtextbox_Chat6.Text = $WorkSheet.Columns.Item($importedvariables.Chat6.Column).Rows.Item($ImportedVariables.Chat6.Row).Text
		$richtextbox_Chat7.Text = $WorkSheet.Columns.Item($importedvariables.Chat7.Column).Rows.Item($ImportedVariables.Chat7.Row).Text
		$richtextbox_ChatPhone.Text = $WorkSheet.Columns.Item($importedvariables.Chat_Phone.Column).Rows.Item($ImportedVariables.Chat_Phone.Row).Text
		
		$richtextbox_Lunch1.Text = $WorkSheet.Columns.Item($importedvariables.Chat1.Lunch).Rows.Item($ImportedVariables.Chat1.Row).Text
		$richtextbox_Lunch2.Text = $WorkSheet.Columns.Item($importedvariables.Chat2.Lunch).Rows.Item($ImportedVariables.Chat2.Row).Text
		$richtextbox_Lunch3.Text = $WorkSheet.Columns.Item($importedvariables.Chat3.Lunch).Rows.Item($ImportedVariables.Chat3.Row).Text
		$richtextbox_Lunch4.Text = $WorkSheet.Columns.Item($importedvariables.Chat4.Lunch).Rows.Item($ImportedVariables.Chat4.Row).Text
		$richtextbox_Lunch5.Text = $WorkSheet.Columns.Item($importedvariables.Chat5.Lunch).Rows.Item($ImportedVariables.Chat5.Row).Text
		$richtextbox_Lunch6.Text = $WorkSheet.Columns.Item($importedvariables.Chat6.Lunch).Rows.Item($ImportedVariables.Chat6.Row).Text
		$richtextbox_Lunch7.Text = $WorkSheet.Columns.Item($importedvariables.Chat7.Lunch).Rows.Item($ImportedVariables.Chat7.Row).Text
		
		$richtextbox_AccessChats.Text = $WorkSheet.Columns.Item($importedvariables.AccessChats.Column).Rows.Item($ImportedVariables.AccessChats.Row).Text
		
		$richtextbox_Routing1.Text = $WorkSheet.Columns.Item($importedvariables.Routing.Column).Rows.Item($ImportedVariables.Routing.Row).Text
		$richtextbox_TWBackup.Text = $WorkSheet.Columns.Item($importedvariables.RoutingBackup.Column).Rows.Item($ImportedVariables.RoutingBackup.Row).Text
		
		$richtextbox_Phone1.Text = $WorkSheet.Columns.Item($importedvariables.Phone1.Column).Rows.Item($ImportedVariables.Phone1.Row).Text
		$richtextbox_Phone2.Text = $WorkSheet.Columns.Item($importedvariables.Phone2.Column).Rows.Item($ImportedVariables.Phone2.Row).Text
		$richtextbox_Phone3.Text = $WorkSheet.Columns.Item($importedvariables.Phone3.Column).Rows.Item($ImportedVariables.Phone3.Row).Text
		$richtextbox_Phone4.Text = $WorkSheet.Columns.Item($importedvariables.Phone4.Column).Rows.Item($ImportedVariables.Phone4.Row).Text
		$richtextbox_Phone5.Text = $WorkSheet.Columns.Item($importedvariables.Phone5.Column).Rows.Item($ImportedVariables.Phone5.Row).Text
		$richtextbox_Phone6.Text = $WorkSheet.Columns.Item($importedvariables.Phone6.Column).Rows.Item($ImportedVariables.Phone6.Row).Text
		$richtextbox_Phone7.Text = $WorkSheet.Columns.Item($importedvariables.Phone7.Column).Rows.Item($ImportedVariables.Phone7.Row).Text
		$richtextbox_Phone8.Text = $WorkSheet.Columns.Item($importedvariables.Phone8.Column).Rows.Item($ImportedVariables.Phone8.Row).Text
		$richtextbox_Phone9.Text = $WorkSheet.Columns.Item($importedvariables.Phone9.Column).Rows.Item($ImportedVariables.Phone9.Row).Text
		$richtextbox_Phone10.Text = $WorkSheet.Columns.Item($importedvariables.Phone10.Column).Rows.Item($ImportedVariables.Phone10.Row).Text
		
		
		#---------------------------------------------------------------------------------------------------------------------------------
		## What is the tab you want to look up on the Ticket watch sheet for KSS Contacts
		#---------------------------------------------------------------------------------------------------------------------------------
		$WorkSheet = $WorkBook.sheets.item($importedvariables_KSSContacts.worksheet.worksheet)
		
		#---------------------------------------------------------------------------------------------------------------------------------
		## KSS Contact info
		#---------------------------------------------------------------------------------------------------------------------------------	
		$richtextbox_KSSContact1.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact1.Column).Rows.Item($importedvariables_KSSContacts.KSSContact1.Row).Text
		$richtextbox_KSSContact2.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact2.Column).Rows.Item($importedvariables_KSSContacts.KSSContact2.Row).Text
		$richtextbox_KSSContact3.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact3.Column).Rows.Item($importedvariables_KSSContacts.KSSContact3.Row).Text
		$richtextbox_KSSContact4.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact4.Column).Rows.Item($importedvariables_KSSContacts.KSSContact4.Row).Text
		$richtextbox_KSSContact5.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact5.Column).Rows.Item($importedvariables_KSSContacts.KSSContact5.Row).Text
		$richtextbox_KSSContact6.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSContact6.Column).Rows.Item($importedvariables_KSSContacts.KSSContact6.Row).Text
		
		$richtextbox_KSSNum1.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum1.Column).Rows.Item($importedvariables_KSSContacts.KSSNum1.Row).Text
		$richtextbox_KSSNum2.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum2.Column).Rows.Item($importedvariables_KSSContacts.KSSNum2.Row).Text
		$richtextbox_KSSNum3.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum3.Column).Rows.Item($importedvariables_KSSContacts.KSSNum3.Row).Text
		$richtextbox_KSSNum4.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum4.Column).Rows.Item($importedvariables_KSSContacts.KSSNum4.Row).Text
		$richtextbox_KSSNum5.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum5.Column).Rows.Item($importedvariables_KSSContacts.KSSNum5.Row).Text
		$richtextbox_KSSNum6.Text = $WorkSheet.Columns.Item($importedvariables_KSSContacts.KSSNum6.Column).Rows.Item($importedvariables_KSSContacts.KSSNum6.Row).Text
		
		$objExcel.DisplayAlerts = $False
		$objExcel.Quit()
		Stop-Process -name "Excel"
		Stop-Process -name excel.exe
		
		$global:duty = 1
	}
	
}

$tabpage_Settings_Enter={
	#TODO: Place custom script here
	
	if ($global:settings -eq "0")
	{
		
		$PW_inicontent = Get-IniContent -FilePath $passwordini
		
		$textbox_PW_HistoryLength.Text = $PW_inicontent.History.Length
		$textbox_PW_AgeMax.Text = $PW_inicontent.Age.Maximum
		$textbox_PW_AgeMin.Text = $PW_inicontent.Age.Minimum
		$textbox_PW_MinCharLength.Text = $PW_inicontent.MinChar.Length
		$textbox_PW_PassphraseLength.Text = $PW_inicontent.MinChar.PassPhrase
		$textbox_PW_Capital.Text = $PW_inicontent.Complexity.Capital
		$textbox_PW_LowerCase.Text = $PW_inicontent.Complexity.Lower
		$textbox_PW_Number.Text = $PW_inicontent.Complexity.Number
		$textbox_PW_Special.Text = $PW_inicontent.Complexity.Special
		
		update-combobox $combobox_DCs $(Get-ADDomainController -filter * | sort-object).name
		
		$global:settings = 1
	}
}

$tabpage_Settings_FSDailyDuty_Enter={
	#TODO: Place custom script here
	
	if ($global:FSDuties -eq "0")
	{
		#-----------------------------
		## define duties info
		#-----------------------------
		$objExcel = New-Object -ComObject Excel.Application
		$objExcel.Visible = $false
		
		#$WorkBook = $objExcel.Workbooks.Open($importedvariables.Workbook.Workbook)
		$WorkBook = $objExcel.Workbooks.Open($onedriveLocal)
		
		#---------------------------------------------------------------------------------------------------------------------------------
		## What is the tab you want to look up on the Ticket watch sheet for Field Services info
		#---------------------------------------------------------------------------------------------------------------------------------
		$WorkSheet = $WorkBook.sheets.item($importedvariables_FS.worksheet.worksheet)
		
		#---------------------------------------------------------------------------------------------------------------------------------
		## KSS Contact info
		#---------------------------------------------------------------------------------------------------------------------------------	
		$richtextbox_FS_Phones1.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone1.Column).Rows.Item($importedvariables_FS.Phone1.Row).Text
		$richtextbox_FS_Phones2.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone2.Column).Rows.Item($importedvariables_FS.Phone2.Row).Text
		$richtextbox_FS_Phones3.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone3.Column).Rows.Item($importedvariables_FS.Phone3.Row).Text
		$richtextbox_FS_Phones4.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone4.Column).Rows.Item($importedvariables_FS.Phone4.Row).Text
		$richtextbox_FS_Phones5.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone5.Column).Rows.Item($importedvariables_FS.Phone5.Row).Text
		$richtextbox_FS_Phones6.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone6.Column).Rows.Item($importedvariables_FS.Phone6.Row).Text
		$richtextbox_FS_Phones7.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone7.Column).Rows.Item($importedvariables_FS.Phone7.Row).Text
		$richtextbox_FS_Phones8.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone8.Column).Rows.Item($importedvariables_FS.Phone8.Row).Text
		$richtextbox_FS_Phones9.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone9.Column).Rows.Item($importedvariables_FS.Phone9.Row).Text
		$richtextbox_FS_Phones10.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone10.Column).Rows.Item($importedvariables_FS.Phone10.Row).Text
		$richtextbox_FS_Phones11.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone11.Column).Rows.Item($importedvariables_FS.Phone11.Row).Text
		$richtextbox_FS_Phones12.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone12.Column).Rows.Item($importedvariables_FS.Phone12.Row).Text
		$richtextbox_FS_Phones13.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone13.Column).Rows.Item($importedvariables_FS.Phone13.Row).Text
		$richtextbox_FS_Phones14.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone14.Column).Rows.Item($importedvariables_FS.Phone14.Row).Text
		$richtextbox_FS_Phones15.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone15.Column).Rows.Item($importedvariables_FS.Phone15.Row).Text
		$richtextbox_FS_Phones16.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone16.Column).Rows.Item($importedvariables_FS.Phone16.Row).Text
		$richtextbox_FS_Phones17.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone17.Column).Rows.Item($importedvariables_FS.Phone17.Row).Text
		$richtextbox_FS_Phones18.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone18.Column).Rows.Item($importedvariables_FS.Phone18.Row).Text
		$richtextbox_FS_Phones19.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone19.Column).Rows.Item($importedvariables_FS.Phone19.Row).Text
		$richtextbox_FS_Phones20.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone20.Column).Rows.Item($importedvariables_FS.Phone20.Row).Text
		$richtextbox_FS_Phones21.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone21.Column).Rows.Item($importedvariables_FS.Phone21.Row).Text
		$richtextbox_FS_Phones22.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone22.Column).Rows.Item($importedvariables_FS.Phone22.Row).Text
		$richtextbox_FS_Phones23.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone23.Column).Rows.Item($importedvariables_FS.Phone23.Row).Text
		$richtextbox_FS_Phones24.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone24.Column).Rows.Item($importedvariables_FS.Phone24.Row).Text
		$richtextbox_FS_Phones25.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone25.Column).Rows.Item($importedvariables_FS.Phone25.Row).Text
		
		$richtextbox_FS_PhStart1.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone1.StartColumn).Rows.Item($importedvariables_FS.Phone1.Row).Text
		$richtextbox_FS_PhStart2.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone2.StartColumn).Rows.Item($importedvariables_FS.Phone2.Row).Text
		$richtextbox_FS_PhStart3.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone3.StartColumn).Rows.Item($importedvariables_FS.Phone3.Row).Text
		$richtextbox_FS_PhStart4.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone4.StartColumn).Rows.Item($importedvariables_FS.Phone4.Row).Text
		$richtextbox_FS_PhStart5.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone5.StartColumn).Rows.Item($importedvariables_FS.Phone5.Row).Text
		$richtextbox_FS_PhStart6.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone6.StartColumn).Rows.Item($importedvariables_FS.Phone6.Row).Text
		$richtextbox_FS_PhStart7.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone7.StartColumn).Rows.Item($importedvariables_FS.Phone7.Row).Text
		$richtextbox_FS_PhStart8.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone8.StartColumn).Rows.Item($importedvariables_FS.Phone8.Row).Text
		$richtextbox_FS_PhStart9.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone9.StartColumn).Rows.Item($importedvariables_FS.Phone9.Row).Text
		$richtextbox_FS_PhStart10.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone10.StartColumn).Rows.Item($importedvariables_FS.Phone10.Row).Text
		$richtextbox_FS_PhStart11.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone11.StartColumn).Rows.Item($importedvariables_FS.Phone11.Row).Text
		$richtextbox_FS_PhStart12.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone12.StartColumn).Rows.Item($importedvariables_FS.Phone12.Row).Text
		$richtextbox_FS_PhStart13.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone13.StartColumn).Rows.Item($importedvariables_FS.Phone13.Row).Text
		$richtextbox_FS_PhStart14.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone14.StartColumn).Rows.Item($importedvariables_FS.Phone14.Row).Text
		$richtextbox_FS_PhStart15.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone15.StartColumn).Rows.Item($importedvariables_FS.Phone15.Row).Text
		$richtextbox_FS_PhStart16.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone16.StartColumn).Rows.Item($importedvariables_FS.Phone16.Row).Text
		$richtextbox_FS_PhStart17.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone17.StartColumn).Rows.Item($importedvariables_FS.Phone17.Row).Text
		$richtextbox_FS_PhStart18.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone18.StartColumn).Rows.Item($importedvariables_FS.Phone18.Row).Text
		$richtextbox_FS_PhStart19.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone19.StartColumn).Rows.Item($importedvariables_FS.Phone19.Row).Text
		$richtextbox_FS_PhStart20.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone20.StartColumn).Rows.Item($importedvariables_FS.Phone20.Row).Text
		$richtextbox_FS_PhStart21.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone21.StartColumn).Rows.Item($importedvariables_FS.Phone21.Row).Text
		$richtextbox_FS_PhStart22.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone22.StartColumn).Rows.Item($importedvariables_FS.Phone22.Row).Text
		$richtextbox_FS_PhStart23.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone23.StartColumn).Rows.Item($importedvariables_FS.Phone23.Row).Text
		$richtextbox_FS_PhStart24.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone24.StartColumn).Rows.Item($importedvariables_FS.Phone24.Row).Text
		$richtextbox_FS_PhStart25.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone25.StartColumn).Rows.Item($importedvariables_FS.Phone25.Row).Text
		
		$richtextbox_FS_PhEnd1.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone1.EndColumn).Rows.Item($importedvariables_FS.Phone1.Row).Text
		if ($richtextbox_FS_PhEnd1.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd1.Visible = $false
		}
		$richtextbox_FS_PhEnd2.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone2.EndColumn).Rows.Item($importedvariables_FS.Phone2.Row).Text
		if ($richtextbox_FS_PhEnd2.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd2.Visible = $false
		}
		$richtextbox_FS_PhEnd3.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone3.EndColumn).Rows.Item($importedvariables_FS.Phone3.Row).Text
		if ($richtextbox_FS_PhEnd3.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd3.Visible = $false
		}
		$richtextbox_FS_PhEnd4.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone4.EndColumn).Rows.Item($importedvariables_FS.Phone4.Row).Text
		if ($richtextbox_FS_PhEnd4.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd4.Visible = $false
		}
		$richtextbox_FS_PhEnd5.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone5.EndColumn).Rows.Item($importedvariables_FS.Phone5.Row).Text
		if ($richtextbox_FS_PhEnd5.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd5.Visible = $false
		}
		$richtextbox_FS_PhEnd6.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone6.EndColumn).Rows.Item($importedvariables_FS.Phone6.Row).Text
		if ($richtextbox_FS_PhEnd6.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd6.Visible = $false
		}
		$richtextbox_FS_PhEnd7.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone7.EndColumn).Rows.Item($importedvariables_FS.Phone7.Row).Text
		if ($richtextbox_FS_PhEnd7.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd7.Visible = $false
		}
		$richtextbox_FS_PhEnd8.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone8.EndColumn).Rows.Item($importedvariables_FS.Phone8.Row).Text
		if ($richtextbox_FS_PhEnd8.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd8.Visible = $false
		}
		$richtextbox_FS_PhEnd9.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone9.EndColumn).Rows.Item($importedvariables_FS.Phone9.Row).Text
		if ($richtextbox_FS_PhEnd9.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd9.Visible = $false
		}
		$richtextbox_FS_PhEnd10.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone10.EndColumn).Rows.Item($importedvariables_FS.Phone10.Row).Text
		if ($richtextbox_FS_PhEnd10.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd10.Visible = $false
		}
		$richtextbox_FS_PhEnd11.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone11.EndColumn).Rows.Item($importedvariables_FS.Phone11.Row).Text
		if ($richtextbox_FS_PhEnd11.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd11.Visible = $false
		}
		$richtextbox_FS_PhEnd12.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone12.EndColumn).Rows.Item($importedvariables_FS.Phone12.Row).Text
		if ($richtextbox_FS_PhEnd12.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd12.Visible = $false
		}
		$richtextbox_FS_PhEnd13.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone13.EndColumn).Rows.Item($importedvariables_FS.Phone13.Row).Text
		if ($richtextbox_FS_PhEnd13.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd13.Visible = $false
		}
		$richtextbox_FS_PhEnd14.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone14.EndColumn).Rows.Item($importedvariables_FS.Phone14.Row).Text
		if ($richtextbox_FS_PhEnd14.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd14.Visible = $false
		}
		$richtextbox_FS_PhEnd15.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone15.EndColumn).Rows.Item($importedvariables_FS.Phone15.Row).Text
		if ($richtextbox_FS_PhEnd15.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd15.Visible = $false
		}
		
		$richtextbox_FS_PhEnd16.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone16.EndColumn).Rows.Item($importedvariables_FS.Phone16.Row).Text
		if ($richtextbox_FS_PhEnd16.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd16.Visible = $false
		}
		$richtextbox_FS_PhEnd17.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone17.EndColumn).Rows.Item($importedvariables_FS.Phone17.Row).Text
		if ($richtextbox_FS_PhEnd17.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd17.Visible = $false
		}
		$richtextbox_FS_PhEnd18.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone18.EndColumn).Rows.Item($importedvariables_FS.Phone18.Row).Text
		if ($richtextbox_FS_PhEnd18.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd18.Visible = $false
		}
		$richtextbox_FS_PhEnd19.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone19.EndColumn).Rows.Item($importedvariables_FS.Phone19.Row).Text
		if ($richtextbox_FS_PhEnd19.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd19.Visible = $false
		}
		$richtextbox_FS_PhEnd20.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone20.EndColumn).Rows.Item($importedvariables_FS.Phone20.Row).Text
		if ($richtextbox_FS_PhEnd20.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd20.Visible = $false
		}
		$richtextbox_FS_PhEnd21.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone21.EndColumn).Rows.Item($importedvariables_FS.Phone21.Row).Text
		if ($richtextbox_FS_PhEnd21.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd21.Visible = $false
		}
		$richtextbox_FS_PhEnd22.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone22.EndColumn).Rows.Item($importedvariables_FS.Phone22.Row).Text
		if ($richtextbox_FS_PhEnd22.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd22.Visible = $false
		}
		$richtextbox_FS_PhEnd23.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone23.EndColumn).Rows.Item($importedvariables_FS.Phone23.Row).Text
		if ($richtextbox_FS_PhEnd23.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd23.Visible = $false
		}
		$richtextbox_FS_PhEnd24.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone24.EndColumn).Rows.Item($importedvariables_FS.Phone24.Row).Text
		if ($richtextbox_FS_PhEnd24.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd24.Visible = $false
		}
		$richtextbox_FS_PhEnd25.text = $WorkSheet.Columns.Item($importedvariables_FS.Phone25.EndColumn).Rows.Item($importedvariables_FS.Phone25.Row).Text
		if ($richtextbox_FS_PhEnd25.Text -eq "#N/A")
		{
			$richtextbox_FS_PhEnd25.Visible = $false
		}
		
		$textbox_DellSupport1.Text = $WorkSheet.Columns.Item($importedvariables_FS.DellSupport1.Column).Rows.Item($importedvariables_FS.DellSupport1.Row).Text
		$textbox_DellSupport2.Text = $WorkSheet.Columns.Item($importedvariables_FS.DellSupport2.Column).Rows.Item($importedvariables_FS.DellSupport2.Row).Text
		$textbox_DellSupport3.Text = $WorkSheet.Columns.Item($importedvariables_FS.DellSupport3.Column).Rows.Item($importedvariables_FS.DellSupport3.Row).Text
		
		$textbox_FSChats1.Text = $WorkSheet.Columns.Item($importedvariables_FS.Chats1.Column).Rows.Item($importedvariables_FS.Chats1.Row).Text
		$textbox_FSChats2.Text = $WorkSheet.Columns.Item($importedvariables_FS.Chats2.Column).Rows.Item($importedvariables_FS.Chats2.Row).Text
		$textbox_FSChats3.Text = $WorkSheet.Columns.Item($importedvariables_FS.Chats3.Column).Rows.Item($importedvariables_FS.Chats3.Row).Text
		
		$textbox_FS_PTO1.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO1.Column).Rows.Item($importedvariables_FS.PTO1.Row).Text
		$textbox_FS_PTO2.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO2.Column).Rows.Item($importedvariables_FS.PTO2.Row).Text
		$textbox_FS_PTO3.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO3.Column).Rows.Item($importedvariables_FS.PTO3.Row).Text
		$textbox_FS_PTO4.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO4.Column).Rows.Item($importedvariables_FS.PTO4.Row).Text
		$textbox_FS_PTO5.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO5.Column).Rows.Item($importedvariables_FS.PTO5.Row).Text
		$textbox_FS_PTO6.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO6.Column).Rows.Item($importedvariables_FS.PTO6.Row).Text
		$textbox_FS_PTO7.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO7.Column).Rows.Item($importedvariables_FS.PTO7.Row).Text
		$textbox_FS_PTO8.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO8.Column).Rows.Item($importedvariables_FS.PTO8.Row).Text
		$textbox_FS_PTO9.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO9.Column).Rows.Item($importedvariables_FS.PTO9.Row).Text
		$textbox_FS_PTO10.Text = $WorkSheet.Columns.Item($importedvariables_FS.PTO10.Column).Rows.Item($importedvariables_FS.PTO10.Row).Text
		
		$objExcel.DisplayAlerts = $False
		$objExcel.Quit()
		Stop-Process -name "Excel"
		Stop-Process -name excel.exe
		
		$global:FSDuties = 1
	}

}

$toolstripbutton_Exchange_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_Exchange
}

$toolstripbutton_o365_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_O365
}

$toolstripbutton_Azure_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_Azure
}

$toolstripbutton_Sharepoint_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_Sharepoint
}

$button_AD_Properties_Click={
	#TODO: Place custom script here
	$splitcontainer_AD_User.Visible = $true
	
	if ($datagridview_ADObjectSearch -eq $null)
	{
		$toolstrip_textbox_User_AD.Text = $datagridview_ADObjectSearch.SelectedCells[0].FormattedValue
		
		$toolstripbutton_GetInfo_ADUser.PerformClick()
		
		$param = $datagridview_ADObjectSearch.SelectedCells[0].FormattedValue
		Show-Edit_ADuser_psf $param
	}
	else
	{
		$param = $toolstrip_textbox_User_AD.Text
		Show-Edit_ADuser_psf $param
	}
}

$tabpage_AD_Groups_Enter={
	#TODO: Place custom script here
	$groupbox_ADGroups_ChangeCustom.Visible = $false
	$groupbox_ADGroups.Visible = $true
}

$datagridview_NTFS_AcessList_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
	$Error.clear()
	
	try
	{
		$textbox_NTFS_ADGroup.Clear()
		$textbox_NTFS_ADGroupApproval.Clear()
		$textbox_NTFS_ADGroupOwner.Clear()
		$textbox_NTFS_ADGroupOwnerEmail.Clear()
		$richtextbox_NTFS_OwnerInfoError.Clear()
		$richtextbox_NTFS_OwnerInfoError.ForeColor = 'Black'
		
		$AD_group1 = $($datagridview_NTFS_AcessList.SelectedCells[0].FormattedValue).Replace("KIEWITPLAZA\", "")
		
		$textbox_NTFS_ADGroup.Text = $AD_group1
		
		$group_info = Get-ADGroup $AD_group1 -Properties Managedby, description
		
		$textbox_NTFS_ADGroupApproval.Text = "No approval info"
		
		switch -Wildcard ($group_info.description)
		{
			"*Required*" { $textbox_NTFS_ADGroupApproval.Text = "Required" }
			"*Notify*" { $textbox_NTFS_ADGroupApproval.Text = "Notify" }
			"*None*" { $textbox_NTFS_ADGroupApproval.Text = "None" }
		}
		
		$owner_info = Get-ADUser $group_info.Managedby -Properties Name, Mail | Select-Object Name, Mail
		if ($owner_info.enabled -eq $false)
		{
			$managersmanager = Get-ADUser $owner_info
			$managersmanager = $managersmanager.samaccountname
			$managersmanager_email = $managersmanager.mail
			$group_info_Managedby = $group_info.Managedby
			$richtextbox_NTFS_OwnerInfoError.Text = "$group_info_Managedby was disabled. Listing their supervisor."
		}
		else
		{
			$textbox_NTFS_ADGroupOwner.Text = $owner_info.name
			$textbox_NTFS_ADGroupOwnerEmail.Text = $owner_info.Mail
		}
	}
	catch
	{
		$textbox_NTFS_ADGroup.Clear()
		$textbox_NTFS_ADGroupApproval.Clear()
		$textbox_NTFS_ADGroupOwner.Text = "No owner found"
		$textbox_NTFS_ADGroupOwnerEmail.Clear()
		$richtextbox_NTFS_OwnerInfoError.Text = $Error.Exception.Message
	}
}

$datagridview_NTFS_AcessList_CellContentDoubleClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	if ($textbox_NTFS_ADGroupApproval.Text -contains "No*")
	{
		$ADgroup = $datagridview_NTFS_AcessList.SelectedCells[0].FormattedValue
		Show-NTFS_Permissions_psf $ADgroup
	}
	else
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Have you received documented approval in the ticket yet?", "Status", 4)
		if ($OUTPUT -eq "YES")
		{
			$ADgroup = $datagridview_NTFS_AcessList.SelectedCells[0].FormattedValue
			Show-NTFS_Permissions_psf $ADgroup
		}
		else
		{
			$richtextbox_NTFS_OwnerInfoError.Text = "This requires approval first."
		}
	}
}

$toolstripbutton_MS_AD_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_AD
}

$toolstripbutton7_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_Exchange
}

$toolstripbutton8_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_O365
}

$toolstripbutton9_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_Azure
}

$toolstripbutton10_Click={
	#TODO: Place custom script here
	$tabcontrol_MS.SelectedTab = $tabpage_MS_Sharepoint
}

$textbox_OldADAccount_Leave={
	#TODO: Place custom script here
	#if ($combobox_PERNR.SelectedText -eq $null -or $combobox_PERNR.Text -eq $null)
	#{
		$button_PERNR_Swap.Visible = $false
		
		#$textbox_OldADAccount.Text = $toolstrip_textbox_User_AD.text
		$textbox_OldADAccount_text = $textbox_OldADAccount.text -replace ".{2}$"
		$richtextbox_PERNR_Output.Clear()
		
		$newADUserObject = $(Get-ADUser -LDAPFilter:"(anr=$textbox_OldADAccount_text)").samaccountname
		
		Load-ComboBox $combobox_PERNR $newADUserObject
	#}
}

$datagridview_MapDrives_CellContentDoubleClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_NTFSPermissions
	$textbox_NTFSPermissions.Text = $datagridview_MapDrives.SelectedCells[0].FormattedValue
	
	$button_GetNTFSPermissions.PerformClick()
}

$button_NTFS_Clear_Click={
	#TODO: Place custom script here
	$textbox_NTFSPermissions.Clear()
}

$linklabel_NTFS_ApprovalScript_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
	#TODO: Place custom script here
	
	$NTFS_ApprovalScript | clip
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, NTFS Approval script"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, NTFS Approval script"
}

$lawyWinAdminToolStripMenuItem_Click={
	#TODO: Place custom script here
	start-process $installpath\bin\LazyWinAdmin.exe
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching LawyWinAdmin"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching LawyWinAdmin"
}

$toolstripbutton_AD_PWGenerateBulk_Click={
	#TODO: Place custom script here
	$newphrase = @{}
	$i = 0
	do
	{
		
		#-----------------------------
		# generating new password
		#-----------------------------
		do
		{
			$special_characters = @('!', '@', '$', '#', '%', '&')
			$special_character = get-random $special_characters
			
			#-----------------------------
			# generating new password
			#-----------------------------
			$random1 = Get-Content $dictionary | Get-Random
			$newphrase[$($i + 1)] = get-password $random1
			
			
			##get AD credentials and test if they are valid
			$username = "test.ps"
			
			##function to be able to test AD credentials
			Add-Type -AssemblyName System.DirectoryServices.AccountManagement
			
			$ct = [System.DirectoryServices.AccountManagement.ContextType]::Domain
			$pc = New-Object System.DirectoryServices.AccountManagement.PrincipalContext($ct, $Domain_com)
			
			$Valid = @{
				IsValid	    = $pc.ValidateCredentials($username, $newphrase).ToString()
			}
			$ValidTest = (New-Object PSObject -Property $Valid)
			
		}
		while ($ValidTest.isvalid.text -eq $false)
		$i = $i + 1
	}
	while ($i -lt $toolstriptextbox_AD_PW.Text)
	
	#-----------------------------
	# displaying new password
	#-----------------------------
	$richtextbox_AD_UsersLeft.Text = $newphrase | Format-List | Out-String
	$richtextbox_AD_UsersRight.Clear()
	$richtextbox_AD_UsersGroups.Clear()
	
	$splitcontainer_AD_User.Visible = $false
	$richtextbox_AD_UsersRight.Visible = $false
	$richtextbox_AD_UsersGroups.Visible = $false
	$richtextbox_AD_UsersLeft.Visible = $true
	$datagridview_AD_DirectReports.Visible = $false
	
	
	#-----------------------------
	# writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Generating new password from dictionary for User"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Generating new password from dictionary for User"
}


$toolstripbutton_AD_PWCopy2Clip_Click={
	#TODO: Place custom script here
	$toolstriptextbox_Password_ADUser.text | clip
}

$button_TWDBSync_Click={
	#TODO: Place custom script here
	Start-Process $twdb
}

$buttonRandomWordGenerator_Click={
	#TODO: Place custom script here
	$textbox_Settings_PW_output.Clear()
	
	$textbox_Settings_PW_output.Text = "Looking online for words..... `r`n"
	$Request = Invoke-WebRequest -Uri $uri -Verbose
	
	remove-item $randomfile
	$Request.Content | out-file $randomfile
	
	$words = Get-Content $randomfile
	remove-item $randomfile
	
	$textbox_Settings_PW_output.AppendText("Received words `r`n")
	$textbox_Settings_PW_output.AppendText("Saving random words from received list.... `r`n")
	
	$i = "0"
	do
	{
		$word = get-random $words
		
		if ($word.length -gt "4")
		{
			#$textbox_Settings_PW_output.AppendText("$i `r`n")
			$word | out-file $randomfile -Append
		}
		$i = [int]$i + 1
	}
	while ($i -lt $passwordvariables.Random.SaveLength)
	
	#Filter out common words
	$textbox_Settings_PW_output.Text = "Removing from exclusion list..... `r`n"
	
	$words = get-content $randomfile
	$ExcludedWords = Get-Content $ExcludedWordFile
	remove-item $randomfile
	
	ForEach ($Word in $Words)
	{
		if ($ExcludedWords -notContains $Word)
		{
			$word | out-file $randomfile -Append
		}
		else
		{
			$textbox_Settings_PW_output.AppendText("This word was removed: $Word `r`n")
		}
	}
	
	$textbox_Settings_PW_output.Text = "New Random list generated"

}

$uSErGroupSearchToolStripMenuItem_Click={
	#TODO: Place custom script here
	$cmd = "$env:windir\system32\rundll32.exe"
	$param = "dsquery.dll,OpenQueryWindow"
	Start-Process $cmd $param
}

$pCSearchToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$linklabel_NTFS_AccessConfirmation_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
	#TODO: Place custom script here
	$NTFS_AccessConfirmation | clip
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, NTFS Access Confirmation script"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, NTFS Access Confirmation script"
}

$button_NTFS_RDP_Click={
	#TODO: Place custom script here
	Start-Process c:\windows\system32\mstsc.exe -WorkingDirectory "C:\Windows\system32"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching Remote desktop utility"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Remote desktop utility"
}

$toolstripbutton11_Click={
	#TODO: Place custom script here
	$tabcontrol_Top.SelectedTab = $tabpage_Top_Networking
}

$button_DNS_ResolveIP_Click= {
	#TODO: Place custom script here
	$richtextbox_Networking_Output.Visible = $false
	$datagridview_NetworkOutput.Visible = $true
	$Error.clear()
	
	$nslookup = resolve-dnsname $toolstriptextbox_Networking_Object.Text -NoHostsFile
	
	if ($Error.Exception -eq $null)
	{
		$route = ConvertTo-DataTable -InputObject $nslookup
		Load-DataGridView -DataGridView $datagridview_NetworkOutput -Item $route
	}
	elseif ($Error.Exception -like "*DNS name does not exist*")
	{
		$richtextbox_Networking_Output.Visible = $true
		$datagridview_NetworkOutput.Visible = $false
		$richtextbox_Networking_Output.Text = $Error.Exception.Message
	}
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	
	$toolstriptextbox_Networking_Object_Text = $toolstriptextbox_Networking_Object.Text
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, DNS Resolution: $toolstriptextbox_Networking_Object_Text"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching Remote desktop utility"
}

$button_DNS_Ping_Click={
	#TODO: Place custom script here
	<#
	$richtextbox_Networking_Output.Visible = $true
	$datagridview_NetworkOutput.Visible = $false

	$ping = & ping $toolstriptextbox_Networking_Object.Text | Format-Table -AutoSize | out-string
	$richtextbox_Networking_Output.Text = $ping
	#>
	
	start-process ping -ArgumentList $($toolstriptextbox_Networking_Object.Text), -t;
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Pinging a PC, IP address of $toolstriptextbox_Networking_Object :: $ip"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Pinging a PC"
}

$toolstripbutton_Network_IPConfig_Click={
	#TODO: Place custom script here
	$richtextbox_Networking_Output.Visible = $true
	$datagridview_NetworkOutput.Visible = $false
	
	$richtextbox_Networking_Output.Text = Get-IP -ComputerName $toolstriptextbox_Networking_Object.Text | Format-List Name, IP4, IP4Subnet, DefaultGWY, MacAddress, DNSServer, WinsPrimary, WinsSecondary | Out-String
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, IPConfig lookup"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, IPConfig lookup"
}

$toolstripbutton_Network_Route_Click={
	#TODO: Place custom script here
	$richtextbox_Networking_Output.Visible = $false
	$datagridview_NetworkOutput.Visible = $true
	
	#$richtextbox_Networking_Output.Text = Get-Routetable -ComputerName $toolstriptextbox_Networking_Object.Text | ft -auto | Out-String
	
	$route = ConvertTo-DataTable -InputObject $(Get-Routetable -ComputerName $toolstriptextbox_Networking_Object.Text)
	
	Load-DataGridView -DataGridView $datagridview_NetworkOutput -Item $route
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Network Route check"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Network Route check"
}


$toolstripbutton_Network_ConectTest_Click={
	#TODO: Place custom script here
	$richtextbox_Networking_Output.Visible = $false
	$datagridview_NetworkOutput.Visible = $true
	
	$connectroute = ConvertTo-DataTable -InputObject $(Test-Server -computername $toolstriptextbox_Networking_Object.Text)
	Load-DataGridView -DataGridView $datagridview_NetworkOutput -Item $connectroute
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Network Connectivity Test"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Network Connectivity Test"
	
}

$toolstripbutton_Network_InterfaceCheck_Click={
	#TODO: Place custom script here
	$richtextbox_Networking_Output.Visible = $false
	$datagridview_NetworkOutput.Visible = $true
	
	Get-NICInfo -ComputerName $ComputerName
	
	$interface_Check = ConvertTo-DataTable -InputObject $(Get-NICInfo -ComputerName $toolstriptextbox_Networking_Object.Text )
	Load-DataGridView -DataGridView $datagridview_NetworkOutput -Item $interface_Check
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Network Interface Check"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Network Interface Check"
}

$buttonCheckUPLevel_Click={
	#TODO: Place custom script here
	$path = $textbox_NTFSPermissions.Text
	$path1 = $path.Replace($($path | Split-Path -Leaf), "")
	
	$textbox_NTFSPermissions.Text = $path1.substring(0, $path1.Length - 1)
	
	$button_GetNTFSPermissions.PerformClick()
}


$sAPPWResetToolStripMenuItem_Click={
	#TODO: Place custom script here
	Start-Process "$bin\SAP_PW.oft"
	
	#-----------------------------
	# writing to log files
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Launching email template for SAP PW Reset"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Launching email template for SAP PW Reset"
}

$tabpage_Settings_Lunch_Enter={
	#TODO: Place custom script here
	if ($global:LunchBuddies -eq "0")
	{
		#-----------------------------
		## define duties info
		#-----------------------------
		$objExcel = New-Object -ComObject Excel.Application
		$objExcel.Visible = $false
		
		#$WorkBook = $objExcel.Workbooks.Open($importedvariables.Workbook.Workbook)
		$WorkBook = $objExcel.Workbooks.Open($onedriveLocal)
		
		
		#---------------------------------------------------------------------------------------------------------------------------------
		## What is the tab you want to look up on the Ticket watch sheet for servide desk info
		#---------------------------------------------------------------------------------------------------------------------------------
		$WorkSheet = $WorkBook.sheets.item($importedvariables_lunch.worksheet.LunchWorksheet)
		
		#-----------------------------
		## painting lunch schedule info
		#-----------------------------
		$richtextbox_LunchA1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA1.Column).Rows.Item($importedvariables_lunch.LunchA1.Row).Text
		$richtextbox_LunchA2_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA2.Column).Rows.Item($importedvariables_lunch.LunchA2.Row).Text
		$richtextbox_LunchA3_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA3.Column).Rows.Item($importedvariables_lunch.LunchA3.Row).Text
		$richtextbox_LunchA4_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA4.Column).Rows.Item($importedvariables_lunch.LunchA4.Row).Text
		$richtextbox_LunchA5_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA5.Column).Rows.Item($importedvariables_lunch.LunchA5.Row).Text
		$richtextbox_LunchA6_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA6.Column).Rows.Item($importedvariables_lunch.LunchA6.Row).Text
		$richtextbox_LunchA7_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA7.Column).Rows.Item($importedvariables_lunch.LunchA7.Row).Text
		$richtextbox_LunchA8_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA8.Column).Rows.Item($importedvariables_lunch.LunchA8.Row).Text
		
		$richtextbox_LunchB1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB1.Column).Rows.Item($importedvariables_lunch.LunchB1.Row).Text
		$richtextbox_LunchB1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB2.Column).Rows.Item($importedvariables_lunch.LunchB2.Row).Text
		$richtextbox_LunchB2_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB3.Column).Rows.Item($importedvariables_lunch.LunchB3.Row).Text
		$richtextbox_LunchB3_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB4.Column).Rows.Item($importedvariables_lunch.LunchB4.Row).Text
		$richtextbox_LunchB4_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB5.Column).Rows.Item($importedvariables_lunch.LunchB5.Row).Text
		$richtextbox_LunchB5_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB6.Column).Rows.Item($importedvariables_lunch.LunchB6.Row).Text
		
		$richtextbox_LunchC1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC1.Column).Rows.Item($importedvariables_lunch.LunchC1.Row).Text
		$richtextbox_LunchC2_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC2.Column).Rows.Item($importedvariables_lunch.LunchC2.Row).Text
		$richtextbox_LunchC3_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC3.Column).Rows.Item($importedvariables_lunch.LunchC3.Row).Text
		$richtextbox_LunchC4_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC4.Column).Rows.Item($importedvariables_lunch.LunchC4.Row).Text
		$richtextbox_LunchC5_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC5.Column).Rows.Item($importedvariables_lunch.LunchC5.Row).Text
		$richtextbox_LunchC6_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC6.Column).Rows.Item($importedvariables_lunch.LunchC6.Row).Text
		$richtextbox_LunchC7_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC7.Column).Rows.Item($importedvariables_lunch.LunchC7.Row).Text
		$richtextbox_LunchC8_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC8.Column).Rows.Item($importedvariables_lunch.LunchC8.Row).Text
		
		$objExcel.DisplayAlerts = $False
		$objExcel.Quit()
		Stop-Process -name "Excel"
		Stop-Process -name excel.exe
		
		$global:LunchBuddies = 1
	}
}

$buttonSDLunches_Click={
	#TODO: Place custom script here
	Show-SDLunchBuddy_psf
}

$buttonRefresh_Click={
	#TODO: Place custom script here
	#-----------------------------
	## define duties info
	#-----------------------------
	$objExcel = New-Object -ComObject Excel.Application
	$objExcel.Visible = $false
	
	#$WorkBook = $objExcel.Workbooks.Open($importedvariables.Workbook.Workbook)
	$WorkBook = $objExcel.Workbooks.Open($onedriveLocal)
	
	
	#---------------------------------------------------------------------------------------------------------------------------------
	## What is the tab you want to look up on the Ticket watch sheet for servide desk info
	#---------------------------------------------------------------------------------------------------------------------------------
	$WorkSheet = $WorkBook.sheets.item($importedvariables_lunch.worksheet.LunchWorksheet)
	
	#-----------------------------
	## painting lunch schedule info
	#-----------------------------
	$richtextbox_LunchA1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA1.Column).Rows.Item($importedvariables_lunch.LunchA1.Row).Text
	$richtextbox_LunchA2_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA2.Column).Rows.Item($importedvariables_lunch.LunchA2.Row).Text
	$richtextbox_LunchA3_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA3.Column).Rows.Item($importedvariables_lunch.LunchA3.Row).Text
	$richtextbox_LunchA4_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA4.Column).Rows.Item($importedvariables_lunch.LunchA4.Row).Text
	$richtextbox_LunchA5_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA5.Column).Rows.Item($importedvariables_lunch.LunchA5.Row).Text
	$richtextbox_LunchA6_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA6.Column).Rows.Item($importedvariables_lunch.LunchA6.Row).Text
	$richtextbox_LunchA7_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA7.Column).Rows.Item($importedvariables_lunch.LunchA7.Row).Text
	$richtextbox_LunchA8_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchA8.Column).Rows.Item($importedvariables_lunch.LunchA8.Row).Text
	
	$richtextbox_LunchB1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB1.Column).Rows.Item($importedvariables_lunch.LunchB1.Row).Text
	$richtextbox_LunchB1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB2.Column).Rows.Item($importedvariables_lunch.LunchB2.Row).Text
	$richtextbox_LunchB2_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB3.Column).Rows.Item($importedvariables_lunch.LunchB3.Row).Text
	$richtextbox_LunchB3_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB4.Column).Rows.Item($importedvariables_lunch.LunchB4.Row).Text
	$richtextbox_LunchB4_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB5.Column).Rows.Item($importedvariables_lunch.LunchB5.Row).Text
	$richtextbox_LunchB5_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchB6.Column).Rows.Item($importedvariables_lunch.LunchB6.Row).Text
	
	$richtextbox_LunchC1_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC1.Column).Rows.Item($importedvariables_lunch.LunchC1.Row).Text
	$richtextbox_LunchC2_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC2.Column).Rows.Item($importedvariables_lunch.LunchC2.Row).Text
	$richtextbox_LunchC3_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC3.Column).Rows.Item($importedvariables_lunch.LunchC3.Row).Text
	$richtextbox_LunchC4_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC4.Column).Rows.Item($importedvariables_lunch.LunchC4.Row).Text
	$richtextbox_LunchC5_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC5.Column).Rows.Item($importedvariables_lunch.LunchC5.Row).Text
	$richtextbox_LunchC6_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC6.Column).Rows.Item($importedvariables_lunch.LunchC6.Row).Text
	$richtextbox_LunchC7_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC7.Column).Rows.Item($importedvariables_lunch.LunchC7.Row).Text
	$richtextbox_LunchC8_Name.Text = $WorkSheet.Columns.Item($importedvariables_lunch.LunchC8.Column).Rows.Item($importedvariables_lunch.LunchC8.Row).Text
	
	$objExcel.DisplayAlerts = $False
	$objExcel.Quit()
	Stop-Process -name "Excel"
	Stop-Process -name excel.exe
}


$button_Exch_Users_HideUnhideFromGAL_Click={
	#TODO: Place custom script here
	$splitcontainer_Exch_Users.Visible = $true
	
	$GAL_User = Get-ADuser -filter { (samaccountname -eq $toolstrip_textbox_User_AD.Text) -or (displayname -eq $toolstrip_textbox_User_AD.Text) -or (mail -eq $toolstrip_textbox_User_AD.Text) -or (universalprincipalname -like $toolstrip_textbox_User_AD.Text) } -Properties msExchHideFromAddressLists | Where-Object {$_.name -notlike "*admin"}
	
	if ($GAL_User.msExchHideFromAddressLists -eq $null)
	{
		set-aduser $GAL_User -replace @{ msExchHideFromAddressLists = $true } -Verbose
	}
	elseif ($GAL_User.msExchHideFromAddressLists -eq 'True')
	{
		set-aduser $GAL_User -replace @{ msExchHideFromAddressLists = $false } -Verbose
	}
	else
	{
		set-aduser $GAL_User -remove @{ msExchHideFromAddressLists = $false } -Verbose
	}

	$toolstripbutton_GetInfo_ADUser.PerformClick()
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $pcname, Toggling hide/unhide from GAL variable"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Toggling hide/unhide from GAL variable"
}

$button_Exch_Users_SMTP_Click={
	#TODO: Place custom script here
	$groupbox_Exch_SMTPEdit.Visible = $true
	$groupbox_Exch_Mailbox_output.Visible = $false
	$groupbox_Exch_ActiveSync.Visible = $false
	$groupbox_Exch_Delegation.Visible = $false
	
	$smtp = get-aduser $objecttype -Properties proxyaddresses | Select-Object proxyaddresses
	
	$alias = @()
	$array = @()
	
	foreach ($entry in $smtp.proxyaddresses.Value)
	{
		$type = $entry.split(':')
		$alias = New-Object PSObject
		$alias | Add-Member -type NoteProperty -Name 'Type' -Value $type[0]
		$alias | Add-Member -type NoteProperty -Name 'Email Address' -Value $type[1]
		$array += $alias
	}
	
	$Exch_DT = ConvertTo-DataTable -InputObject $array
	Load-DataGridView -DataGridView $datagridview_Exch_SMTPEdit -Item $Exch_DT
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Lookup of SMTP info"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Lookup of SMTP info"
}

$button_Exch_SMTPCancel_Click={
	#TODO: Place custom script here
	$groupbox_Exch_SMTPEdit.Visible = $false
	$groupbox_Exch_Mailbox_output.Visible = $true
	$groupbox_Exch_ActiveSync.Visible = $false
	$groupbox_Exch_Delegation.Visible = $false
}

$button_Exch_Users_Delegation_Click={
	#TODO: Place custom script here
	$groupbox_Exch_SMTPEdit.Visible = $false
	$groupbox_Exch_Mailbox_output.Visible = $false
	$groupbox_Exch_ActiveSync.Visible = $false
	$groupbox_Exch_Delegation.Visible = $true
	
	$FullAccess_DT = ConvertTo-DataTable -InputObject $($global:delegate | Select-Object Identity)
	Load-DataGridView -DataGridView $datagridview_Exch_Delegate_FullAccess -Item $FullAccess_DT
	
	$SendAs_DT = ConvertTo-DataTable -InputObject $($global:sendas | Select-Object Identity)
	Load-DataGridView -DataGridView $datagridview_Exch_Delegate_SendAs -Item $SendAs_DT
	
	$SendOnBehalf_DT = ConvertTo-DataTable -InputObject $global:O365_ExchInfo.GrantSendOnBehalfTo
	Load-DataGridView -DataGridView $datagridview_Exch_Delegate_SendOnBehalf -Item $SendOnBehalf_DT
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Delegation lookup in Exchange"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Delegation lookup in Exchange"
}

$toolstripbutton_Network_clear_Click={
	#TODO: Place custom script here
	$toolstriptextbox_Networking_Object.Clear()
}

$textbox_PernerSWAP_TicketNumber_TextChanged={
	#TODO: Place custom script here
	$button_PERNR_Swap.Visible = $true
}


$toolstripbutton_AD_PWBulkApply_Click={
	#TODO: Place custom script here
	$groupbox_ADuser_Output.Visible = $false
	$groupbox_PERNRSwap.Visible = $false
	$groupbox_AD_BulkPW.Visible = $true
}

$button_AD_BulkPWApply_Click={
	#TODO: Place custom script here
	Remove-Item $bulkPW -Force
	
	$name = "Name"
	$name | Out-File $bulkPW -Force
	$richtextbox_AD_BulkdPWUserList.Text | Out-File $bulkPW-Append -Force
	
	$partners = Import-Csv $bulkPW
	foreach ($account in $partners.name)
	{
		#-----------------------------
		# generating new password
		#-----------------------------
		
		$special_characters = @('!', '@', '$', '#', '%', '&')
		$special_character = get-random $special_characters
		
		#-----------------------------
		# generating new password
		#-----------------------------
		$random1 = Get-Content $dictionary | Get-Random
		$newphrase = get-password $random1
		
		Set-ADAccountPassword $account -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $newphrase -Force) -verbose
		set-aduser $account -ChangePasswordAtLogon $false -Verbose
		
		$array = @{ }
		$array = New-Object PSObject
		$array | Add-Member -Type NoteProperty -Name 'Username' -Value $account
		$array | Add-Member -Type NoteProperty -Name 'Password' -Value $newphrase
		$array | Export-Csv $bulkPWComplete -Force -Append
		$array = $null
		
	}
	Start-Process $bulkPWComplete
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Bulk generate and application of PWs"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Bulk generate and application of PWs"
}

$button_NTFS_UserCheck_Click={
	#TODO: Place custom script here
	$group = "*" + $textbox_NTFS_ADGroup.text + "*"
	$textbox_NTFS_ADGrouptext = $textbox_NTFS_ADGroup.text
	$textbox_NTFS_UserCheckText = $textbox_NTFS_UserCheck.Text
	
	if ( (Get-ADUser $textbox_NTFS_UserCheck.Text -Properties memberof).memberof -like $group)
	{
		$richtextbox_NTFS_OwnerInfoError.ForeColor = 'Green'
		$richtextbox_NTFS_OwnerInfoError.Text = "$textbox_NTFS_UserCheckText is a member of $textbox_NTFS_ADGrouptext"
	}
	else
	{
		$richtextbox_NTFS_OwnerInfoError.ForeColor = 'Red'
		$richtextbox_NTFS_OwnerInfoError.Text = "$textbox_NTFS_UserCheckText is NOT a meber of that group"
	}
	
	#-----------------------------
	## writing to log file
	#-----------------------------
	$date = $(Get-Date).tostring("MM-dd-yyyy")
	$time = $(get-date -UFormat %R)
	Log-Write -LogPath $LogFile -LineValue "$date, $time, $userName, $userName, $pcname, Checking if user is in AD group from NTFS permissions check"
	
	Log-Write -LogPath $logusagefile -LineValue "$date, $time, $userName, $pcname, Checking if user is in AD group from NTFS permissions check"
}

$textbox_NTFS_UserCheck_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	#TODO: Place custom script here
	if ($_.KeyCode -eq 'Enter')
	{
		$button_NTFS_UserCheck.PerformClick()
	}
}

$datagridview_Exch_Search_CellMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	#TODO: Place custom script here
	$toolstrip_textbox_User_AD.Text = $datagridview_Exch_Search.SelectedCells[0].FormattedValue
	
	$toolstripbutton_GetInfo_ADUser.PerformClick()
}

$button_Exch_MessagingFixAll_Click={
	#TODO: Place custom script here
	$richtextbox_Exch_UsersRight.clear()
	$richtextbox_Exch_UsersDelegation.clear()
	$richtextbox_Exch_SMTPInfo.clear()
	
	$splitcontainer_Exch_Users.Visible = $false
	
	$Found_user = get-aduser -Identity $toolstrip_textbox_User_AD.Text -Properties *
	
	$richtextbox_Exch_UsersLeft.Text = "Starting fix for account...... `n"
	
	TRY
	{
		$richtextbox_Exch_UsersLeft.AppendText("Setting step 1: msRTCSIP-UserEnabled to True `n")
		set-aduser $Found_user -REPLACE @{ "msRTCSIP-UserEnabled" = $True } -verbose
		sleep -seconds 1
	}
	catch
	{
		$richtextbox_Exch_UsersLeft.Text = "Setting of step 1: msRTCSIP-UserEnabled failed. Please check username and try again."
	}
	
	try
	{
		$richtextbox_Exch_UsersLeft.AppendText("Setting step 2: msRTCSIP-DeploymentLocator to sipfed.online.lync.com `n")
		Set-aduser $Found_user -replace @{ "msRTCSIP-DeploymentLocator" = "sipfed.online.lync.com" } -verbose
		sleep -seconds 1
	}
	catch
	{
		$richtextbox_Exch_UsersLeft.Text = "Setting step 2: msRTCSIP-DeploymentLocator failed. Please check username and try again."
	}
		
	try
	{
		$email = $Found_user.samaccountname + "@kiewit.com"
		$richtextbox_Exch_UsersLeft.AppendText("Setting step 3: main proxy email to $email `n")
		Set-aduser $Found_user -add @{ proxyAddresses = "smtp:$("$email")" } -verbose
		Start-sleep 10
	}
	catch
	{
		$richtextbox_Exch_UsersLeft.Text = "Setting step 3: main proxy email failed. Please check username and try again."
	}
		
		try
	{
		$richtextbox_Exch_UsersLeft.AppendText("Setting UPN of user `n")
		Set-aduser $Found_user -UserPrincipalName ("{0}@{1}" -f "$UserName", "kiewit.COM") -verbose
	}
	CATCH [Microsoft.ActiveDirectory.Management.ADException]
	{
		$richtextbox_Exch_UsersLeft.AppendText("UPN is already set properly. `n")
	}
	
	$richtextbox_Exch_UsersLeft.AppendText("Checking steps were performed. Will show output of settings once done.")
	start-sleep -s 15
	
	$checkuser = get-aduser $Found_user -Properties * | select SamAccountName, Enabled, ExtensionAttribute11, msRTCSIP-PrimaryUserAddress, msRTCSIP-UserEnabled, msRTCSIP-DeploymentLocator, userPrincipalName | Format-List | Out-String
	$richtextbox_Exch_UsersLeft.AppendText("`n")
	$richtextbox_Exch_UsersLeft.AppendText($checkuser)
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>